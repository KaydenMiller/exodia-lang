//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SINGLE_COMMENT=10, BLOCK_COMMENT=11, LET=12, RETURN=13, FN=14, IF=15, 
		ELSE=16, WHILE=17, DO=18, FOR=19, CLASS=20, EXTENDS=21, THIS=22, SUPER=23, 
		NEW=24, WHITESPACE=25, INT=26, STRING=27, TRUE=28, FALSE=29, ADDITIVE_OPERATOR=30, 
		MULTIPLICATIVE_OPERATOR=31, EQUALITY_OPERATOR=32, RELATIONAL_OPERATOR=33, 
		LOGICAL_OR=34, LOGICAL_AND=35, SIMPLE_ASSIGNMENT_OPERATOR=36, COMPLEX_ASSIGMENT_OPERATOR=37, 
		IDENTIFIER=38;
	public const int
		RULE_init = 0, RULE_value = 1, RULE_program = 2, RULE_statement = 3, RULE_class_declaration = 4, 
		RULE_class_extends = 5, RULE_iteration_statement = 6, RULE_for_statement = 7, 
		RULE_do_while_statement = 8, RULE_while_statement = 9, RULE_variable_statement = 10, 
		RULE_variable_declaration_list = 11, RULE_variable_declaration = 12, RULE_variable_initializer = 13, 
		RULE_if_statement = 14, RULE_empty_statement = 15, RULE_return_statement = 16, 
		RULE_block_statement = 17, RULE_function_declaration = 18, RULE_formal_parameter_list = 19, 
		RULE_expression_statement = 20, RULE_expression = 21, RULE_assignment_expression = 22, 
		RULE_assignment_operator = 23, RULE_left_hand_side_expression = 24, RULE_member_expression = 25, 
		RULE_this_expression = 26, RULE_identifier = 27, RULE_logical_OR_expression = 28, 
		RULE_logical_AND_expression = 29, RULE_equality_expression = 30, RULE_relational_expression = 31, 
		RULE_additive_expression = 32, RULE_multiplicative_expression = 33, RULE_unary_expression = 34, 
		RULE_call_expression = 35, RULE_super = 36, RULE_callee = 37, RULE_arguments = 38, 
		RULE_argument_list = 39, RULE_new_expression = 40, RULE_primary_expression = 41, 
		RULE_parenthesized_expression = 42, RULE_literal = 43, RULE_true_literal = 44, 
		RULE_false_literal = 45, RULE_numeric_literal = 46, RULE_string_literal = 47;
	public static readonly string[] ruleNames = {
		"init", "value", "program", "statement", "class_declaration", "class_extends", 
		"iteration_statement", "for_statement", "do_while_statement", "while_statement", 
		"variable_statement", "variable_declaration_list", "variable_declaration", 
		"variable_initializer", "if_statement", "empty_statement", "return_statement", 
		"block_statement", "function_declaration", "formal_parameter_list", "expression_statement", 
		"expression", "assignment_expression", "assignment_operator", "left_hand_side_expression", 
		"member_expression", "this_expression", "identifier", "logical_OR_expression", 
		"logical_AND_expression", "equality_expression", "relational_expression", 
		"additive_expression", "multiplicative_expression", "unary_expression", 
		"call_expression", "super", "callee", "arguments", "argument_list", "new_expression", 
		"primary_expression", "parenthesized_expression", "literal", "true_literal", 
		"false_literal", "numeric_literal", "string_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'('", "';'", "')'", "'.'", "'['", "']'", null, 
		null, "'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", 
		"'for'", "'class'", "'extends'", "'this'", "'super'", "'new'", null, null, 
		null, "'true'", "'false'", null, null, null, null, "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "INT", "STRING", 
		"TRUE", "FALSE", "ADDITIVE_OPERATOR", "MULTIPLICATIVE_OPERATOR", "EQUALITY_OPERATOR", 
		"RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", "SIMPLE_ASSIGNMENT_OPERATOR", 
		"COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExodiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExodiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 0, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__0);
			State = 97;
			value();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 98;
				Match(T__1);
				State = 99;
				value();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExodiaParser.INT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 2, RULE_value);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				init();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExodiaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 4, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 276989669426L) != 0) {
				{
				{
				State = 111;
				statement();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case THIS:
			case SUPER:
			case NEW:
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
			case ADDITIVE_OPERATOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				expression_statement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				empty_statement();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				block_statement();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				function_declaration();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				return_statement();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				variable_statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 125;
				if_statement();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 126;
				iteration_statement();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 127;
				class_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ExodiaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_extendsContext class_extends() {
			return GetRuleContext<Class_extendsContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(CLASS);
			State = 131;
			identifier();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 132;
				class_extends();
				}
			}

			State = 135;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ExodiaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_extendsContext class_extends() {
		Class_extendsContext _localctx = new Class_extendsContext(Context, State);
		EnterRule(_localctx, 10, RULE_class_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(EXTENDS);
			State = 138;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_iteration_statement);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				do_while_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142;
				for_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExodiaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(FOR);
			State = 146;
			Match(T__3);
			State = 147;
			variable_statement();
			State = 148;
			equality_expression(0);
			State = 149;
			Match(T__4);
			State = 150;
			expression();
			State = 151;
			Match(T__5);
			State = 152;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ExodiaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(DO);
			State = 155;
			statement();
			State = 156;
			Match(WHILE);
			State = 157;
			Match(T__3);
			State = 158;
			expression();
			State = 159;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(WHILE);
			State = 162;
			Match(T__3);
			State = 163;
			expression();
			State = 164;
			Match(T__5);
			State = 165;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ExodiaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(LET);
			State = 168;
			variable_declaration_list(0);
			State = 169;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_listContext variable_declaration_list() {
		return variable_declaration_list(0);
	}

	private Variable_declaration_listContext variable_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_declaration_listContext _localctx = new Variable_declaration_listContext(Context, _parentState);
		Variable_declaration_listContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_variable_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 172;
			variable_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Variable_declaration_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variable_declaration_list);
					State = 174;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 175;
					Match(T__1);
					State = 176;
					variable_declaration();
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			identifier();
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 183;
				variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(SIMPLE_ASSIGNMENT_OPERATOR);
			State = 187;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExodiaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExodiaParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_statement);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				Match(IF);
				State = 190;
				Match(T__3);
				State = 191;
				expression();
				State = 192;
				Match(T__5);
				State = 193;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(IF);
				State = 196;
				Match(T__3);
				State = 197;
				expression();
				State = 198;
				Match(T__5);
				State = 199;
				statement();
				State = 200;
				Match(ELSE);
				State = 201;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExodiaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(RETURN);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276987641872L) != 0) {
				{
				State = 208;
				expression();
				}
			}

			State = 211;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__0);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 276989669426L) != 0) {
				{
				{
				State = 214;
				statement();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ExodiaParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(FN);
			State = 223;
			identifier();
			State = 224;
			Match(T__3);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 225;
				formal_parameter_list(0);
				}
			}

			State = 228;
			Match(T__5);
			State = 229;
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		return formal_parameter_list(0);
	}

	private Formal_parameter_listContext formal_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, _parentState);
		Formal_parameter_listContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_formal_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 232;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Formal_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formal_parameter_list);
					State = 234;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 235;
					Match(T__1);
					State = 236;
					identifier();
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			expression();
			State = 243;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment_expression);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				logical_OR_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				left_hand_side_expression();
				State = 249;
				assignment_operator();
				State = 250;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX_ASSIGMENT_OPERATOR() { return GetToken(ExodiaParser.COMPLEX_ASSIGMENT_OPERATOR, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !(_la==SIMPLE_ASSIGNMENT_OPERATOR || _la==COMPLEX_ASSIGMENT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_hand_side_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		public Left_hand_side_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_hand_side_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_hand_side_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_hand_side_expressionContext left_hand_side_expression() {
		Left_hand_side_expressionContext _localctx = new Left_hand_side_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_left_hand_side_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			member_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_expressionContext member_expression() {
		return member_expression(0);
	}

	private Member_expressionContext member_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_expressionContext _localctx = new Member_expressionContext(Context, _parentState);
		Member_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_member_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 259;
				identifier();
				}
				break;
			case THIS:
				{
				State = 260;
				this_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 271;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 263;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 264;
						Match(T__6);
						State = 265;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 266;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 267;
						Match(T__7);
						State = 268;
						expression();
						State = 269;
						Match(T__8);
						}
						break;
					}
					} 
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(ExodiaParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_OR_expressionContext : ParserRuleContext {
		public Logical_OR_expressionContext left;
		public IToken op;
		public Logical_AND_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(ExodiaParser.LOGICAL_OR, 0); }
		public Logical_OR_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_OR_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_OR_expressionContext logical_OR_expression() {
		return logical_OR_expression(0);
	}

	private Logical_OR_expressionContext logical_OR_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_OR_expressionContext _localctx = new Logical_OR_expressionContext(Context, _parentState);
		Logical_OR_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_logical_OR_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 281;
			logical_AND_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_OR_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_OR_expression);
					State = 283;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 284;
					_localctx.op = Match(LOGICAL_OR);
					State = 285;
					_localctx.right = logical_AND_expression(0);
					}
					} 
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_AND_expressionContext : ParserRuleContext {
		public Logical_AND_expressionContext left;
		public IToken op;
		public Equality_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(ExodiaParser.LOGICAL_AND, 0); }
		public Logical_AND_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_AND_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_AND_expressionContext logical_AND_expression() {
		return logical_AND_expression(0);
	}

	private Logical_AND_expressionContext logical_AND_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_AND_expressionContext _localctx = new Logical_AND_expressionContext(Context, _parentState);
		Logical_AND_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_logical_AND_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 292;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_AND_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_AND_expression);
					State = 294;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 295;
					_localctx.op = Match(LOGICAL_AND);
					State = 296;
					_localctx.right = equality_expression(0);
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Equality_expressionContext left;
		public IToken op;
		public Relational_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY_OPERATOR() { return GetToken(ExodiaParser.EQUALITY_OPERATOR, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 303;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Equality_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
					State = 305;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 306;
					_localctx.op = Match(EQUALITY_OPERATOR);
					State = 307;
					_localctx.right = relational_expression(0);
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext left;
		public IToken op;
		public Additive_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL_OPERATOR() { return GetToken(ExodiaParser.RELATIONAL_OPERATOR, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 314;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 317;
					_localctx.op = Match(RELATIONAL_OPERATOR);
					State = 318;
					_localctx.right = additive_expression(0);
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext left;
		public IToken op;
		public Multiplicative_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_additive_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 325;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 327;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 328;
					_localctx.op = Match(ADDITIVE_OPERATOR);
					State = 329;
					_localctx.right = multiplicative_expression(0);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext left;
		public IToken op;
		public Unary_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATOR() { return GetToken(ExodiaParser.MULTIPLICATIVE_OPERATOR, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_multiplicative_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 336;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 338;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 339;
					_localctx.op = Match(MULTIPLICATIVE_OPERATOR);
					State = 340;
					_localctx.right = unary_expression();
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unary_expression);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				call_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348;
				Match(ADDITIVE_OPERATOR);
				State = 349;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public CalleeContext callee() {
			return GetRuleContext<CalleeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperContext super() {
			return GetRuleContext<SuperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		return call_expression(0);
	}

	private Call_expressionContext call_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_expressionContext _localctx = new Call_expressionContext(Context, _parentState);
		Call_expressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_call_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case IDENTIFIER:
				{
				State = 353;
				callee();
				State = 354;
				_localctx.args = arguments();
				}
				break;
			case SUPER:
				{
				State = 356;
				super();
				State = 357;
				_localctx.args = arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_expression);
					State = 361;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 362;
					_localctx.args = arguments();
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(ExodiaParser.SUPER, 0); }
		public SuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_super; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperContext super() {
		SuperContext _localctx = new SuperContext(Context, State);
		EnterRule(_localctx, 72, RULE_super);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(SUPER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalleeContext : ParserRuleContext {
		public Left_hand_side_expressionContext lhse;
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		public CalleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalleeContext callee() {
		CalleeContext _localctx = new CalleeContext(Context, State);
		EnterRule(_localctx, 74, RULE_callee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_localctx.lhse = left_hand_side_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 76, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(T__3);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276987641872L) != 0) {
				{
				State = 373;
				argument_list(0);
				}
			}

			State = 376;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 379;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Argument_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 381;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 382;
					Match(T__1);
					State = 383;
					assignment_expression();
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class New_expressionContext : ParserRuleContext {
		public Member_expressionContext exp;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ExodiaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public New_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_expressionContext new_expression() {
		New_expressionContext _localctx = new New_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(NEW);
			State = 390;
			_localctx.exp = member_expression(0);
			State = 391;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_expressionContext new_expression() {
			return GetRuleContext<New_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_primary_expression);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				literal();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				member_expression(0);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				parenthesized_expression();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 396;
				new_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(T__3);
			State = 400;
			expression();
			State = 401;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public True_literalContext true_literal() {
			return GetRuleContext<True_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public False_literalContext false_literal() {
			return GetRuleContext<False_literalContext>(0);
		}
		public AtomContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_literal);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				numeric_literal();
				}
				break;
			case STRING:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				string_literal();
				}
				break;
			case TRUE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 405;
				true_literal();
				}
				break;
			case FALSE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 406;
				false_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class True_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExodiaParser.TRUE, 0); }
		public True_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public True_literalContext true_literal() {
		True_literalContext _localctx = new True_literalContext(Context, State);
		EnterRule(_localctx, 88, RULE_true_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class False_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExodiaParser.FALSE, 0); }
		public False_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public False_literalContext false_literal() {
		False_literalContext _localctx = new False_literalContext(Context, State);
		EnterRule(_localctx, 90, RULE_false_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExodiaParser.INT, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 92, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExodiaParser.STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 94, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return variable_declaration_list_sempred((Variable_declaration_listContext)_localctx, predIndex);
		case 19: return formal_parameter_list_sempred((Formal_parameter_listContext)_localctx, predIndex);
		case 25: return member_expression_sempred((Member_expressionContext)_localctx, predIndex);
		case 28: return logical_OR_expression_sempred((Logical_OR_expressionContext)_localctx, predIndex);
		case 29: return logical_AND_expression_sempred((Logical_AND_expressionContext)_localctx, predIndex);
		case 30: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 31: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 32: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 33: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 35: return call_expression_sempred((Call_expressionContext)_localctx, predIndex);
		case 39: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool variable_declaration_list_sempred(Variable_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formal_parameter_list_sempred(Formal_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_expression_sempred(Member_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_OR_expression_sempred(Logical_OR_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_AND_expression_sempred(Logical_AND_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool call_expression_sempred(Call_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,418,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,5,0,
		101,8,0,10,0,12,0,104,9,0,1,0,1,0,1,1,1,1,3,1,110,8,1,1,2,5,2,113,8,2,
		10,2,12,2,116,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,129,
		8,3,1,4,1,4,1,4,3,4,134,8,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,3,6,144,8,
		6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
		5,11,178,8,11,10,11,12,11,181,9,11,1,12,1,12,3,12,185,8,12,1,13,1,13,1,
		13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,3,14,204,8,14,1,15,1,15,1,16,1,16,3,16,210,8,16,1,16,1,16,1,17,1,17,
		5,17,216,8,17,10,17,12,17,219,9,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,
		227,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,238,8,19,10,
		19,12,19,241,9,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,
		22,253,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,3,25,262,8,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,5,25,272,8,25,10,25,12,25,275,9,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,287,8,28,10,28,12,28,
		290,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,298,8,29,10,29,12,29,301,9,
		29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,309,8,30,10,30,12,30,312,9,30,1,
		31,1,31,1,31,1,31,1,31,1,31,5,31,320,8,31,10,31,12,31,323,9,31,1,32,1,
		32,1,32,1,32,1,32,1,32,5,32,331,8,32,10,32,12,32,334,9,32,1,33,1,33,1,
		33,1,33,1,33,1,33,5,33,342,8,33,10,33,12,33,345,9,33,1,34,1,34,1,34,1,
		34,3,34,351,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,360,8,35,1,35,
		1,35,5,35,364,8,35,10,35,12,35,367,9,35,1,36,1,36,1,37,1,37,1,38,1,38,
		3,38,375,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,385,8,39,10,
		39,12,39,388,9,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,398,8,41,
		1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,408,8,43,1,44,1,44,1,45,1,
		45,1,46,1,46,1,47,1,47,1,47,0,11,22,38,50,56,58,60,62,64,66,70,78,48,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,0,1,
		1,0,36,37,412,0,96,1,0,0,0,2,109,1,0,0,0,4,114,1,0,0,0,6,128,1,0,0,0,8,
		130,1,0,0,0,10,137,1,0,0,0,12,143,1,0,0,0,14,145,1,0,0,0,16,154,1,0,0,
		0,18,161,1,0,0,0,20,167,1,0,0,0,22,171,1,0,0,0,24,182,1,0,0,0,26,186,1,
		0,0,0,28,203,1,0,0,0,30,205,1,0,0,0,32,207,1,0,0,0,34,213,1,0,0,0,36,222,
		1,0,0,0,38,231,1,0,0,0,40,242,1,0,0,0,42,245,1,0,0,0,44,252,1,0,0,0,46,
		254,1,0,0,0,48,256,1,0,0,0,50,261,1,0,0,0,52,276,1,0,0,0,54,278,1,0,0,
		0,56,280,1,0,0,0,58,291,1,0,0,0,60,302,1,0,0,0,62,313,1,0,0,0,64,324,1,
		0,0,0,66,335,1,0,0,0,68,350,1,0,0,0,70,359,1,0,0,0,72,368,1,0,0,0,74,370,
		1,0,0,0,76,372,1,0,0,0,78,378,1,0,0,0,80,389,1,0,0,0,82,397,1,0,0,0,84,
		399,1,0,0,0,86,407,1,0,0,0,88,409,1,0,0,0,90,411,1,0,0,0,92,413,1,0,0,
		0,94,415,1,0,0,0,96,97,5,1,0,0,97,102,3,2,1,0,98,99,5,2,0,0,99,101,3,2,
		1,0,100,98,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,
		105,1,0,0,0,104,102,1,0,0,0,105,106,5,3,0,0,106,1,1,0,0,0,107,110,3,0,
		0,0,108,110,5,26,0,0,109,107,1,0,0,0,109,108,1,0,0,0,110,3,1,0,0,0,111,
		113,3,6,3,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,
		0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,0,0,1,118,5,1,0,0,0,119,
		129,3,40,20,0,120,129,3,30,15,0,121,129,3,34,17,0,122,129,3,36,18,0,123,
		129,3,32,16,0,124,129,3,20,10,0,125,129,3,28,14,0,126,129,3,12,6,0,127,
		129,3,8,4,0,128,119,1,0,0,0,128,120,1,0,0,0,128,121,1,0,0,0,128,122,1,
		0,0,0,128,123,1,0,0,0,128,124,1,0,0,0,128,125,1,0,0,0,128,126,1,0,0,0,
		128,127,1,0,0,0,129,7,1,0,0,0,130,131,5,20,0,0,131,133,3,54,27,0,132,134,
		3,10,5,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,3,6,3,
		0,136,9,1,0,0,0,137,138,5,21,0,0,138,139,3,54,27,0,139,11,1,0,0,0,140,
		144,3,18,9,0,141,144,3,16,8,0,142,144,3,14,7,0,143,140,1,0,0,0,143,141,
		1,0,0,0,143,142,1,0,0,0,144,13,1,0,0,0,145,146,5,19,0,0,146,147,5,4,0,
		0,147,148,3,20,10,0,148,149,3,60,30,0,149,150,5,5,0,0,150,151,3,42,21,
		0,151,152,5,6,0,0,152,153,3,6,3,0,153,15,1,0,0,0,154,155,5,18,0,0,155,
		156,3,6,3,0,156,157,5,17,0,0,157,158,5,4,0,0,158,159,3,42,21,0,159,160,
		5,6,0,0,160,17,1,0,0,0,161,162,5,17,0,0,162,163,5,4,0,0,163,164,3,42,21,
		0,164,165,5,6,0,0,165,166,3,6,3,0,166,19,1,0,0,0,167,168,5,12,0,0,168,
		169,3,22,11,0,169,170,5,5,0,0,170,21,1,0,0,0,171,172,6,11,-1,0,172,173,
		3,24,12,0,173,179,1,0,0,0,174,175,10,1,0,0,175,176,5,2,0,0,176,178,3,24,
		12,0,177,174,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		23,1,0,0,0,181,179,1,0,0,0,182,184,3,54,27,0,183,185,3,26,13,0,184,183,
		1,0,0,0,184,185,1,0,0,0,185,25,1,0,0,0,186,187,5,36,0,0,187,188,3,44,22,
		0,188,27,1,0,0,0,189,190,5,15,0,0,190,191,5,4,0,0,191,192,3,42,21,0,192,
		193,5,6,0,0,193,194,3,6,3,0,194,204,1,0,0,0,195,196,5,15,0,0,196,197,5,
		4,0,0,197,198,3,42,21,0,198,199,5,6,0,0,199,200,3,6,3,0,200,201,5,16,0,
		0,201,202,3,6,3,0,202,204,1,0,0,0,203,189,1,0,0,0,203,195,1,0,0,0,204,
		29,1,0,0,0,205,206,5,5,0,0,206,31,1,0,0,0,207,209,5,13,0,0,208,210,3,42,
		21,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,212,5,5,0,0,212,
		33,1,0,0,0,213,217,5,1,0,0,214,216,3,6,3,0,215,214,1,0,0,0,216,219,1,0,
		0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,
		221,5,3,0,0,221,35,1,0,0,0,222,223,5,14,0,0,223,224,3,54,27,0,224,226,
		5,4,0,0,225,227,3,38,19,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,
		0,0,228,229,5,6,0,0,229,230,3,34,17,0,230,37,1,0,0,0,231,232,6,19,-1,0,
		232,233,3,54,27,0,233,239,1,0,0,0,234,235,10,1,0,0,235,236,5,2,0,0,236,
		238,3,54,27,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,
		1,0,0,0,240,39,1,0,0,0,241,239,1,0,0,0,242,243,3,42,21,0,243,244,5,5,0,
		0,244,41,1,0,0,0,245,246,3,44,22,0,246,43,1,0,0,0,247,253,3,56,28,0,248,
		249,3,48,24,0,249,250,3,46,23,0,250,251,3,44,22,0,251,253,1,0,0,0,252,
		247,1,0,0,0,252,248,1,0,0,0,253,45,1,0,0,0,254,255,7,0,0,0,255,47,1,0,
		0,0,256,257,3,50,25,0,257,49,1,0,0,0,258,259,6,25,-1,0,259,262,3,54,27,
		0,260,262,3,52,26,0,261,258,1,0,0,0,261,260,1,0,0,0,262,273,1,0,0,0,263,
		264,10,2,0,0,264,265,5,7,0,0,265,272,3,54,27,0,266,267,10,1,0,0,267,268,
		5,8,0,0,268,269,3,42,21,0,269,270,5,9,0,0,270,272,1,0,0,0,271,263,1,0,
		0,0,271,266,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
		51,1,0,0,0,275,273,1,0,0,0,276,277,5,22,0,0,277,53,1,0,0,0,278,279,5,38,
		0,0,279,55,1,0,0,0,280,281,6,28,-1,0,281,282,3,58,29,0,282,288,1,0,0,0,
		283,284,10,1,0,0,284,285,5,34,0,0,285,287,3,58,29,0,286,283,1,0,0,0,287,
		290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,57,1,0,0,0,290,288,1,0,
		0,0,291,292,6,29,-1,0,292,293,3,60,30,0,293,299,1,0,0,0,294,295,10,1,0,
		0,295,296,5,35,0,0,296,298,3,60,30,0,297,294,1,0,0,0,298,301,1,0,0,0,299,
		297,1,0,0,0,299,300,1,0,0,0,300,59,1,0,0,0,301,299,1,0,0,0,302,303,6,30,
		-1,0,303,304,3,62,31,0,304,310,1,0,0,0,305,306,10,1,0,0,306,307,5,32,0,
		0,307,309,3,62,31,0,308,305,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,
		311,1,0,0,0,311,61,1,0,0,0,312,310,1,0,0,0,313,314,6,31,-1,0,314,315,3,
		64,32,0,315,321,1,0,0,0,316,317,10,1,0,0,317,318,5,33,0,0,318,320,3,64,
		32,0,319,316,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
		63,1,0,0,0,323,321,1,0,0,0,324,325,6,32,-1,0,325,326,3,66,33,0,326,332,
		1,0,0,0,327,328,10,1,0,0,328,329,5,30,0,0,329,331,3,66,33,0,330,327,1,
		0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,65,1,0,0,0,334,
		332,1,0,0,0,335,336,6,33,-1,0,336,337,3,68,34,0,337,343,1,0,0,0,338,339,
		10,1,0,0,339,340,5,31,0,0,340,342,3,68,34,0,341,338,1,0,0,0,342,345,1,
		0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,67,1,0,0,0,345,343,1,0,0,0,346,
		351,3,82,41,0,347,351,3,70,35,0,348,349,5,30,0,0,349,351,3,68,34,0,350,
		346,1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,351,69,1,0,0,0,352,353,6,35,
		-1,0,353,354,3,74,37,0,354,355,3,76,38,0,355,360,1,0,0,0,356,357,3,72,
		36,0,357,358,3,76,38,0,358,360,1,0,0,0,359,352,1,0,0,0,359,356,1,0,0,0,
		360,365,1,0,0,0,361,362,10,1,0,0,362,364,3,76,38,0,363,361,1,0,0,0,364,
		367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,71,1,0,0,0,367,365,1,0,
		0,0,368,369,5,23,0,0,369,73,1,0,0,0,370,371,3,48,24,0,371,75,1,0,0,0,372,
		374,5,4,0,0,373,375,3,78,39,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,
		1,0,0,0,376,377,5,6,0,0,377,77,1,0,0,0,378,379,6,39,-1,0,379,380,3,44,
		22,0,380,386,1,0,0,0,381,382,10,1,0,0,382,383,5,2,0,0,383,385,3,44,22,
		0,384,381,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,
		79,1,0,0,0,388,386,1,0,0,0,389,390,5,24,0,0,390,391,3,50,25,0,391,392,
		3,76,38,0,392,81,1,0,0,0,393,398,3,86,43,0,394,398,3,50,25,0,395,398,3,
		84,42,0,396,398,3,80,40,0,397,393,1,0,0,0,397,394,1,0,0,0,397,395,1,0,
		0,0,397,396,1,0,0,0,398,83,1,0,0,0,399,400,5,4,0,0,400,401,3,42,21,0,401,
		402,5,6,0,0,402,85,1,0,0,0,403,408,3,92,46,0,404,408,3,94,47,0,405,408,
		3,88,44,0,406,408,3,90,45,0,407,403,1,0,0,0,407,404,1,0,0,0,407,405,1,
		0,0,0,407,406,1,0,0,0,408,87,1,0,0,0,409,410,5,28,0,0,410,89,1,0,0,0,411,
		412,5,29,0,0,412,91,1,0,0,0,413,414,5,26,0,0,414,93,1,0,0,0,415,416,5,
		27,0,0,416,95,1,0,0,0,30,102,109,114,128,133,143,179,184,203,209,217,226,
		239,252,261,271,273,288,299,310,321,332,343,350,359,365,374,386,397,407
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
