//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, SINGLE_COMMENT=9, 
		BLOCK_COMMENT=10, LET=11, RETURN=12, FN=13, IF=14, ELSE=15, WHILE=16, 
		DO=17, FOR=18, CLASS=19, EXTENDS=20, THIS=21, SUPER=22, NEW=23, WHITESPACE=24, 
		INT=25, STRING=26, TRUE=27, FALSE=28, ADDITIVE_OPERATOR=29, MULTIPLICATIVE_OPERATOR=30, 
		EQUALITY_OPERATOR=31, RELATIONAL_OPERATOR=32, LOGICAL_OR=33, LOGICAL_AND=34, 
		SIMPLE_ASSIGNMENT_OPERATOR=35, COMPLEX_ASSIGMENT_OPERATOR=36, IDENTIFIER=37, 
		SEMI=38;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_class_declaration = 2, RULE_class_extends = 3, 
		RULE_iteration_statement = 4, RULE_for_statement = 5, RULE_do_while_statement = 6, 
		RULE_while_statement = 7, RULE_variable_statement = 8, RULE_variable_declaration_list = 9, 
		RULE_variable_declaration = 10, RULE_variable_initializer = 11, RULE_if_statement = 12, 
		RULE_empty_statement = 13, RULE_return_statement = 14, RULE_block_statement = 15, 
		RULE_function_declaration = 16, RULE_formal_parameter_list = 17, RULE_expression_statement = 18, 
		RULE_expression = 19, RULE_assignment_expression = 20, RULE_assignment_operator = 21, 
		RULE_left_hand_side_expression = 22, RULE_member_expression = 23, RULE_this_expression = 24, 
		RULE_identifier = 25, RULE_logical_OR_expression = 26, RULE_logical_AND_expression = 27, 
		RULE_equality_expression = 28, RULE_relational_expression = 29, RULE_additive_expression = 30, 
		RULE_multiplicative_expression = 31, RULE_unary_expression = 32, RULE_call_expression = 33, 
		RULE_super = 34, RULE_callee = 35, RULE_arguments = 36, RULE_argument_list = 37, 
		RULE_new_expression = 38, RULE_primary_expression = 39, RULE_parenthesized_expression = 40, 
		RULE_literal = 41, RULE_true_literal = 42, RULE_false_literal = 43, RULE_numeric_literal = 44, 
		RULE_string_literal = 45;
	public static readonly string[] ruleNames = {
		"program", "statement", "class_declaration", "class_extends", "iteration_statement", 
		"for_statement", "do_while_statement", "while_statement", "variable_statement", 
		"variable_declaration_list", "variable_declaration", "variable_initializer", 
		"if_statement", "empty_statement", "return_statement", "block_statement", 
		"function_declaration", "formal_parameter_list", "expression_statement", 
		"expression", "assignment_expression", "assignment_operator", "left_hand_side_expression", 
		"member_expression", "this_expression", "identifier", "logical_OR_expression", 
		"logical_AND_expression", "equality_expression", "relational_expression", 
		"additive_expression", "multiplicative_expression", "unary_expression", 
		"call_expression", "super", "callee", "arguments", "argument_list", "new_expression", 
		"primary_expression", "parenthesized_expression", "literal", "true_literal", 
		"false_literal", "numeric_literal", "string_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'{'", "'}'", "'.'", "'['", "']'", null, null, 
		"'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", "'for'", 
		"'class'", "'extends'", "'this'", "'super'", "'new'", null, null, null, 
		"'true'", "'false'", null, null, null, null, "'||'", "'&&'", null, null, 
		null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "INT", "STRING", 
		"TRUE", "FALSE", "ADDITIVE_OPERATOR", "MULTIPLICATIVE_OPERATOR", "EQUALITY_OPERATOR", 
		"RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", "SIMPLE_ASSIGNMENT_OPERATOR", 
		"COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER", "SEMI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExodiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExodiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExodiaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 413372741650L) != 0) {
				{
				{
				State = 92;
				statement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case THIS:
			case SUPER:
			case NEW:
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
			case ADDITIVE_OPERATOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				expression_statement();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				empty_statement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				block_statement();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				function_declaration();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				return_statement();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				variable_statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				if_statement();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				iteration_statement();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				class_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ExodiaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_extendsContext class_extends() {
			return GetRuleContext<Class_extendsContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(CLASS);
			State = 112;
			identifier();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 113;
				class_extends();
				}
			}

			State = 116;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ExodiaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_extendsContext class_extends() {
		Class_extendsContext _localctx = new Class_extendsContext(Context, State);
		EnterRule(_localctx, 6, RULE_class_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(EXTENDS);
			State = 119;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_iteration_statement);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				do_while_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				for_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExodiaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(FOR);
			State = 127;
			Match(T__0);
			State = 128;
			variable_statement();
			State = 129;
			equality_expression(0);
			State = 130;
			Match(SEMI);
			State = 131;
			expression();
			State = 132;
			Match(T__1);
			State = 133;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ExodiaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(DO);
			State = 136;
			statement();
			State = 137;
			Match(WHILE);
			State = 138;
			Match(T__0);
			State = 139;
			expression();
			State = 140;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(WHILE);
			State = 143;
			Match(T__0);
			State = 144;
			expression();
			State = 145;
			Match(T__1);
			State = 146;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ExodiaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(LET);
			State = 149;
			variable_declaration_list(0);
			State = 150;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_listContext variable_declaration_list() {
		return variable_declaration_list(0);
	}

	private Variable_declaration_listContext variable_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_declaration_listContext _localctx = new Variable_declaration_listContext(Context, _parentState);
		Variable_declaration_listContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_variable_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 153;
			variable_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Variable_declaration_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variable_declaration_list);
					State = 155;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 156;
					Match(T__2);
					State = 157;
					variable_declaration();
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			identifier();
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 164;
				variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(SIMPLE_ASSIGNMENT_OPERATOR);
			State = 168;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExodiaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExodiaParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_statement);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				Match(IF);
				State = 171;
				Match(T__0);
				State = 172;
				expression();
				State = 173;
				Match(T__1);
				State = 174;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				Match(IF);
				State = 177;
				Match(T__0);
				State = 178;
				expression();
				State = 179;
				Match(T__1);
				State = 180;
				statement();
				State = 181;
				Match(ELSE);
				State = 182;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExodiaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(RETURN);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 138493820930L) != 0) {
				{
				State = 189;
				expression();
				}
			}

			State = 192;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__3);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 413372741650L) != 0) {
				{
				{
				State = 195;
				statement();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ExodiaParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(FN);
			State = 204;
			identifier();
			State = 205;
			Match(T__0);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 206;
				formal_parameter_list(0);
				}
			}

			State = 209;
			Match(T__1);
			State = 210;
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		return formal_parameter_list(0);
	}

	private Formal_parameter_listContext formal_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, _parentState);
		Formal_parameter_listContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_formal_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 213;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Formal_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formal_parameter_list);
					State = 215;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 216;
					Match(T__2);
					State = 217;
					identifier();
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			expression();
			State = 224;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			additive_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment_expression);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				logical_OR_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				left_hand_side_expression();
				State = 230;
				assignment_operator();
				State = 231;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX_ASSIGMENT_OPERATOR() { return GetToken(ExodiaParser.COMPLEX_ASSIGMENT_OPERATOR, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = TokenStream.LA(1);
			if ( !(_la==SIMPLE_ASSIGNMENT_OPERATOR || _la==COMPLEX_ASSIGMENT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_hand_side_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		public Left_hand_side_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_hand_side_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_hand_side_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_hand_side_expressionContext left_hand_side_expression() {
		Left_hand_side_expressionContext _localctx = new Left_hand_side_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_left_hand_side_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			member_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_expressionContext member_expression() {
		return member_expression(0);
	}

	private Member_expressionContext member_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_expressionContext _localctx = new Member_expressionContext(Context, _parentState);
		Member_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_member_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 240;
				identifier();
				}
				break;
			case THIS:
				{
				State = 241;
				this_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 244;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 245;
						Match(T__5);
						State = 246;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 247;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 248;
						Match(T__6);
						State = 249;
						expression();
						State = 250;
						Match(T__7);
						}
						break;
					}
					} 
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(ExodiaParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_OR_expressionContext : ParserRuleContext {
		public Logical_OR_expressionContext left;
		public IToken op;
		public Logical_AND_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(ExodiaParser.LOGICAL_OR, 0); }
		public Logical_OR_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_OR_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_OR_expressionContext logical_OR_expression() {
		return logical_OR_expression(0);
	}

	private Logical_OR_expressionContext logical_OR_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_OR_expressionContext _localctx = new Logical_OR_expressionContext(Context, _parentState);
		Logical_OR_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_logical_OR_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 262;
			logical_AND_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_OR_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_OR_expression);
					State = 264;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 265;
					_localctx.op = Match(LOGICAL_OR);
					State = 266;
					_localctx.right = logical_AND_expression(0);
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_AND_expressionContext : ParserRuleContext {
		public Logical_AND_expressionContext left;
		public IToken op;
		public Equality_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(ExodiaParser.LOGICAL_AND, 0); }
		public Logical_AND_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_AND_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_AND_expressionContext logical_AND_expression() {
		return logical_AND_expression(0);
	}

	private Logical_AND_expressionContext logical_AND_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_AND_expressionContext _localctx = new Logical_AND_expressionContext(Context, _parentState);
		Logical_AND_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_logical_AND_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 273;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_AND_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_AND_expression);
					State = 275;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 276;
					_localctx.op = Match(LOGICAL_AND);
					State = 277;
					_localctx.right = equality_expression(0);
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Equality_expressionContext left;
		public IToken op;
		public Relational_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY_OPERATOR() { return GetToken(ExodiaParser.EQUALITY_OPERATOR, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 284;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Equality_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
					State = 286;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 287;
					_localctx.op = Match(EQUALITY_OPERATOR);
					State = 288;
					_localctx.right = relational_expression(0);
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext left;
		public IToken op;
		public Additive_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL_OPERATOR() { return GetToken(ExodiaParser.RELATIONAL_OPERATOR, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 295;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 297;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 298;
					_localctx.op = Match(RELATIONAL_OPERATOR);
					State = 299;
					_localctx.right = additive_expression(0);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext left;
		public IToken op;
		public Multiplicative_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_additive_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 306;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 313;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 308;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 309;
					_localctx.op = Match(ADDITIVE_OPERATOR);
					State = 310;
					_localctx.right = multiplicative_expression(0);
					}
					} 
				}
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext left;
		public IToken op;
		public Unary_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATOR() { return GetToken(ExodiaParser.MULTIPLICATIVE_OPERATOR, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_multiplicative_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 317;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 319;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 320;
					_localctx.op = Match(MULTIPLICATIVE_OPERATOR);
					State = 321;
					_localctx.right = unary_expression();
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_unary_expression);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				call_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329;
				_localctx.op = Match(ADDITIVE_OPERATOR);
				State = 330;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public CalleeContext callee() {
			return GetRuleContext<CalleeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperContext super() {
			return GetRuleContext<SuperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		return call_expression(0);
	}

	private Call_expressionContext call_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_expressionContext _localctx = new Call_expressionContext(Context, _parentState);
		Call_expressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_call_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case IDENTIFIER:
				{
				State = 334;
				callee();
				State = 335;
				_localctx.args = arguments();
				}
				break;
			case SUPER:
				{
				State = 337;
				super();
				State = 338;
				_localctx.args = arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_expression);
					State = 342;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 343;
					_localctx.args = arguments();
					}
					} 
				}
				State = 348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(ExodiaParser.SUPER, 0); }
		public SuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_super; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperContext super() {
		SuperContext _localctx = new SuperContext(Context, State);
		EnterRule(_localctx, 68, RULE_super);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(SUPER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalleeContext : ParserRuleContext {
		public Left_hand_side_expressionContext lhse;
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		public CalleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalleeContext callee() {
		CalleeContext _localctx = new CalleeContext(Context, State);
		EnterRule(_localctx, 70, RULE_callee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_localctx.lhse = left_hand_side_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 72, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(T__0);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 138493820930L) != 0) {
				{
				State = 354;
				argument_list(0);
				}
			}

			State = 357;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 360;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Argument_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 362;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 363;
					Match(T__2);
					State = 364;
					assignment_expression();
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class New_expressionContext : ParserRuleContext {
		public Member_expressionContext exp;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ExodiaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public New_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_expressionContext new_expression() {
		New_expressionContext _localctx = new New_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(NEW);
			State = 371;
			_localctx.exp = member_expression(0);
			State = 372;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_expressionContext new_expression() {
			return GetRuleContext<New_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_primary_expression);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374;
				literal();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				member_expression(0);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376;
				parenthesized_expression();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 377;
				new_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(T__0);
			State = 381;
			expression();
			State = 382;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public True_literalContext true_literal() {
			return GetRuleContext<True_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public False_literalContext false_literal() {
			return GetRuleContext<False_literalContext>(0);
		}
		public AtomContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_literal);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				numeric_literal();
				}
				break;
			case STRING:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 385;
				string_literal();
				}
				break;
			case TRUE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 386;
				true_literal();
				}
				break;
			case FALSE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 387;
				false_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class True_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExodiaParser.TRUE, 0); }
		public True_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public True_literalContext true_literal() {
		True_literalContext _localctx = new True_literalContext(Context, State);
		EnterRule(_localctx, 84, RULE_true_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class False_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExodiaParser.FALSE, 0); }
		public False_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public False_literalContext false_literal() {
		False_literalContext _localctx = new False_literalContext(Context, State);
		EnterRule(_localctx, 86, RULE_false_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExodiaParser.INT, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 88, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExodiaParser.STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 90, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return variable_declaration_list_sempred((Variable_declaration_listContext)_localctx, predIndex);
		case 17: return formal_parameter_list_sempred((Formal_parameter_listContext)_localctx, predIndex);
		case 23: return member_expression_sempred((Member_expressionContext)_localctx, predIndex);
		case 26: return logical_OR_expression_sempred((Logical_OR_expressionContext)_localctx, predIndex);
		case 27: return logical_AND_expression_sempred((Logical_AND_expressionContext)_localctx, predIndex);
		case 28: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 29: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 30: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 31: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 33: return call_expression_sempred((Call_expressionContext)_localctx, predIndex);
		case 37: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool variable_declaration_list_sempred(Variable_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formal_parameter_list_sempred(Formal_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_expression_sempred(Member_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_OR_expression_sempred(Logical_OR_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_AND_expression_sempred(Logical_AND_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool call_expression_sempred(Call_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,399,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,5,0,94,8,0,10,0,12,0,97,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,110,8,1,1,2,1,2,1,2,3,2,115,8,
		2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,3,4,125,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
		8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,159,8,9,10,9,12,9,162,9,9,1,10,1,
		10,3,10,166,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,3,12,185,8,12,1,13,1,13,1,14,1,14,3,14,191,
		8,14,1,14,1,14,1,15,1,15,5,15,197,8,15,10,15,12,15,200,9,15,1,15,1,15,
		1,16,1,16,1,16,1,16,3,16,208,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,5,17,219,8,17,10,17,12,17,222,9,17,1,18,1,18,1,18,1,19,1,19,1,
		20,1,20,1,20,1,20,1,20,3,20,234,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,
		3,23,243,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,253,8,23,10,
		23,12,23,256,9,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,5,
		26,268,8,26,10,26,12,26,271,9,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,279,
		8,27,10,27,12,27,282,9,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,290,8,28,
		10,28,12,28,293,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,301,8,29,10,29,
		12,29,304,9,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,312,8,30,10,30,12,30,
		315,9,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,323,8,31,10,31,12,31,326,9,
		31,1,32,1,32,1,32,1,32,3,32,332,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		3,33,341,8,33,1,33,1,33,5,33,345,8,33,10,33,12,33,348,9,33,1,34,1,34,1,
		35,1,35,1,36,1,36,3,36,356,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
		5,37,366,8,37,10,37,12,37,369,9,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
		1,39,3,39,379,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,389,8,
		41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,0,11,18,34,46,52,54,56,
		58,60,62,66,74,46,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,0,1,1,0,35,36,393,0,95,1,0,0,0,2,109,1,0,0,0,4,111,1,0,0,0,6,
		118,1,0,0,0,8,124,1,0,0,0,10,126,1,0,0,0,12,135,1,0,0,0,14,142,1,0,0,0,
		16,148,1,0,0,0,18,152,1,0,0,0,20,163,1,0,0,0,22,167,1,0,0,0,24,184,1,0,
		0,0,26,186,1,0,0,0,28,188,1,0,0,0,30,194,1,0,0,0,32,203,1,0,0,0,34,212,
		1,0,0,0,36,223,1,0,0,0,38,226,1,0,0,0,40,233,1,0,0,0,42,235,1,0,0,0,44,
		237,1,0,0,0,46,242,1,0,0,0,48,257,1,0,0,0,50,259,1,0,0,0,52,261,1,0,0,
		0,54,272,1,0,0,0,56,283,1,0,0,0,58,294,1,0,0,0,60,305,1,0,0,0,62,316,1,
		0,0,0,64,331,1,0,0,0,66,340,1,0,0,0,68,349,1,0,0,0,70,351,1,0,0,0,72,353,
		1,0,0,0,74,359,1,0,0,0,76,370,1,0,0,0,78,378,1,0,0,0,80,380,1,0,0,0,82,
		388,1,0,0,0,84,390,1,0,0,0,86,392,1,0,0,0,88,394,1,0,0,0,90,396,1,0,0,
		0,92,94,3,2,1,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,
		0,96,98,1,0,0,0,97,95,1,0,0,0,98,99,5,0,0,1,99,1,1,0,0,0,100,110,3,36,
		18,0,101,110,3,26,13,0,102,110,3,30,15,0,103,110,3,32,16,0,104,110,3,28,
		14,0,105,110,3,16,8,0,106,110,3,24,12,0,107,110,3,8,4,0,108,110,3,4,2,
		0,109,100,1,0,0,0,109,101,1,0,0,0,109,102,1,0,0,0,109,103,1,0,0,0,109,
		104,1,0,0,0,109,105,1,0,0,0,109,106,1,0,0,0,109,107,1,0,0,0,109,108,1,
		0,0,0,110,3,1,0,0,0,111,112,5,19,0,0,112,114,3,50,25,0,113,115,3,6,3,0,
		114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,117,3,2,1,0,117,5,
		1,0,0,0,118,119,5,20,0,0,119,120,3,50,25,0,120,7,1,0,0,0,121,125,3,14,
		7,0,122,125,3,12,6,0,123,125,3,10,5,0,124,121,1,0,0,0,124,122,1,0,0,0,
		124,123,1,0,0,0,125,9,1,0,0,0,126,127,5,18,0,0,127,128,5,1,0,0,128,129,
		3,16,8,0,129,130,3,56,28,0,130,131,5,38,0,0,131,132,3,38,19,0,132,133,
		5,2,0,0,133,134,3,2,1,0,134,11,1,0,0,0,135,136,5,17,0,0,136,137,3,2,1,
		0,137,138,5,16,0,0,138,139,5,1,0,0,139,140,3,38,19,0,140,141,5,2,0,0,141,
		13,1,0,0,0,142,143,5,16,0,0,143,144,5,1,0,0,144,145,3,38,19,0,145,146,
		5,2,0,0,146,147,3,2,1,0,147,15,1,0,0,0,148,149,5,11,0,0,149,150,3,18,9,
		0,150,151,5,38,0,0,151,17,1,0,0,0,152,153,6,9,-1,0,153,154,3,20,10,0,154,
		160,1,0,0,0,155,156,10,1,0,0,156,157,5,3,0,0,157,159,3,20,10,0,158,155,
		1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,19,1,0,0,0,
		162,160,1,0,0,0,163,165,3,50,25,0,164,166,3,22,11,0,165,164,1,0,0,0,165,
		166,1,0,0,0,166,21,1,0,0,0,167,168,5,35,0,0,168,169,3,40,20,0,169,23,1,
		0,0,0,170,171,5,14,0,0,171,172,5,1,0,0,172,173,3,38,19,0,173,174,5,2,0,
		0,174,175,3,2,1,0,175,185,1,0,0,0,176,177,5,14,0,0,177,178,5,1,0,0,178,
		179,3,38,19,0,179,180,5,2,0,0,180,181,3,2,1,0,181,182,5,15,0,0,182,183,
		3,2,1,0,183,185,1,0,0,0,184,170,1,0,0,0,184,176,1,0,0,0,185,25,1,0,0,0,
		186,187,5,38,0,0,187,27,1,0,0,0,188,190,5,12,0,0,189,191,3,38,19,0,190,
		189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,38,0,0,193,29,1,
		0,0,0,194,198,5,4,0,0,195,197,3,2,1,0,196,195,1,0,0,0,197,200,1,0,0,0,
		198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,
		5,5,0,0,202,31,1,0,0,0,203,204,5,13,0,0,204,205,3,50,25,0,205,207,5,1,
		0,0,206,208,3,34,17,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,
		209,210,5,2,0,0,210,211,3,30,15,0,211,33,1,0,0,0,212,213,6,17,-1,0,213,
		214,3,50,25,0,214,220,1,0,0,0,215,216,10,1,0,0,216,217,5,3,0,0,217,219,
		3,50,25,0,218,215,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,
		0,0,221,35,1,0,0,0,222,220,1,0,0,0,223,224,3,38,19,0,224,225,5,38,0,0,
		225,37,1,0,0,0,226,227,3,60,30,0,227,39,1,0,0,0,228,234,3,52,26,0,229,
		230,3,44,22,0,230,231,3,42,21,0,231,232,3,40,20,0,232,234,1,0,0,0,233,
		228,1,0,0,0,233,229,1,0,0,0,234,41,1,0,0,0,235,236,7,0,0,0,236,43,1,0,
		0,0,237,238,3,46,23,0,238,45,1,0,0,0,239,240,6,23,-1,0,240,243,3,50,25,
		0,241,243,3,48,24,0,242,239,1,0,0,0,242,241,1,0,0,0,243,254,1,0,0,0,244,
		245,10,2,0,0,245,246,5,6,0,0,246,253,3,50,25,0,247,248,10,1,0,0,248,249,
		5,7,0,0,249,250,3,38,19,0,250,251,5,8,0,0,251,253,1,0,0,0,252,244,1,0,
		0,0,252,247,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,
		47,1,0,0,0,256,254,1,0,0,0,257,258,5,21,0,0,258,49,1,0,0,0,259,260,5,37,
		0,0,260,51,1,0,0,0,261,262,6,26,-1,0,262,263,3,54,27,0,263,269,1,0,0,0,
		264,265,10,1,0,0,265,266,5,33,0,0,266,268,3,54,27,0,267,264,1,0,0,0,268,
		271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,53,1,0,0,0,271,269,1,0,
		0,0,272,273,6,27,-1,0,273,274,3,56,28,0,274,280,1,0,0,0,275,276,10,1,0,
		0,276,277,5,34,0,0,277,279,3,56,28,0,278,275,1,0,0,0,279,282,1,0,0,0,280,
		278,1,0,0,0,280,281,1,0,0,0,281,55,1,0,0,0,282,280,1,0,0,0,283,284,6,28,
		-1,0,284,285,3,58,29,0,285,291,1,0,0,0,286,287,10,1,0,0,287,288,5,31,0,
		0,288,290,3,58,29,0,289,286,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,
		292,1,0,0,0,292,57,1,0,0,0,293,291,1,0,0,0,294,295,6,29,-1,0,295,296,3,
		60,30,0,296,302,1,0,0,0,297,298,10,1,0,0,298,299,5,32,0,0,299,301,3,60,
		30,0,300,297,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,
		59,1,0,0,0,304,302,1,0,0,0,305,306,6,30,-1,0,306,307,3,62,31,0,307,313,
		1,0,0,0,308,309,10,1,0,0,309,310,5,29,0,0,310,312,3,62,31,0,311,308,1,
		0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,61,1,0,0,0,315,
		313,1,0,0,0,316,317,6,31,-1,0,317,318,3,64,32,0,318,324,1,0,0,0,319,320,
		10,1,0,0,320,321,5,30,0,0,321,323,3,64,32,0,322,319,1,0,0,0,323,326,1,
		0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,63,1,0,0,0,326,324,1,0,0,0,327,
		332,3,78,39,0,328,332,3,66,33,0,329,330,5,29,0,0,330,332,3,64,32,0,331,
		327,1,0,0,0,331,328,1,0,0,0,331,329,1,0,0,0,332,65,1,0,0,0,333,334,6,33,
		-1,0,334,335,3,70,35,0,335,336,3,72,36,0,336,341,1,0,0,0,337,338,3,68,
		34,0,338,339,3,72,36,0,339,341,1,0,0,0,340,333,1,0,0,0,340,337,1,0,0,0,
		341,346,1,0,0,0,342,343,10,1,0,0,343,345,3,72,36,0,344,342,1,0,0,0,345,
		348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,67,1,0,0,0,348,346,1,0,
		0,0,349,350,5,22,0,0,350,69,1,0,0,0,351,352,3,44,22,0,352,71,1,0,0,0,353,
		355,5,1,0,0,354,356,3,74,37,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,
		1,0,0,0,357,358,5,2,0,0,358,73,1,0,0,0,359,360,6,37,-1,0,360,361,3,40,
		20,0,361,367,1,0,0,0,362,363,10,1,0,0,363,364,5,3,0,0,364,366,3,40,20,
		0,365,362,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,
		75,1,0,0,0,369,367,1,0,0,0,370,371,5,23,0,0,371,372,3,46,23,0,372,373,
		3,72,36,0,373,77,1,0,0,0,374,379,3,82,41,0,375,379,3,46,23,0,376,379,3,
		80,40,0,377,379,3,76,38,0,378,374,1,0,0,0,378,375,1,0,0,0,378,376,1,0,
		0,0,378,377,1,0,0,0,379,79,1,0,0,0,380,381,5,1,0,0,381,382,3,38,19,0,382,
		383,5,2,0,0,383,81,1,0,0,0,384,389,3,88,44,0,385,389,3,90,45,0,386,389,
		3,84,42,0,387,389,3,86,43,0,388,384,1,0,0,0,388,385,1,0,0,0,388,386,1,
		0,0,0,388,387,1,0,0,0,389,83,1,0,0,0,390,391,5,27,0,0,391,85,1,0,0,0,392,
		393,5,28,0,0,393,87,1,0,0,0,394,395,5,25,0,0,395,89,1,0,0,0,396,397,5,
		26,0,0,397,91,1,0,0,0,28,95,109,114,124,160,165,184,190,198,207,220,233,
		242,252,254,269,280,291,302,313,324,331,340,346,355,367,378,388
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
