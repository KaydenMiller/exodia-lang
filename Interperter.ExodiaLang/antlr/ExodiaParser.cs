//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SINGLE_COMMENT=10, BLOCK_COMMENT=11, LET=12, RETURN=13, FN=14, IF=15, 
		ELSE=16, WHILE=17, DO=18, FOR=19, CLASS=20, EXTENDS=21, THIS=22, SUPER=23, 
		NEW=24, WHITESPACE=25, INT=26, STRING=27, TRUE=28, FALSE=29, ADD=30, SUB=31, 
		ADDITIVE_OPERATOR=32, MUL=33, DIV=34, MULTIPLICATIVE_OPERATOR=35, EQUALITY_OPERATOR=36, 
		RELATIONAL_OPERATOR=37, LOGICAL_OR=38, LOGICAL_AND=39, SIMPLE_ASSIGNMENT_OPERATOR=40, 
		COMPLEX_ASSIGMENT_OPERATOR=41, IDENTIFIER=42, NEWLINE=43, SEMI=44;
	public const int
		RULE_program = 0, RULE_prog = 1, RULE_stat = 2, RULE_expr = 3, RULE_statement = 4, 
		RULE_class_declaration = 5, RULE_class_extends = 6, RULE_iteration_statement = 7, 
		RULE_for_statement = 8, RULE_do_while_statement = 9, RULE_while_statement = 10, 
		RULE_variable_statement = 11, RULE_variable_declaration_list = 12, RULE_variable_declaration = 13, 
		RULE_variable_initializer = 14, RULE_if_statement = 15, RULE_empty_statement = 16, 
		RULE_return_statement = 17, RULE_block_statement = 18, RULE_function_declaration = 19, 
		RULE_formal_parameter_list = 20, RULE_expression_statement = 21, RULE_expression = 22, 
		RULE_assignment_expression = 23, RULE_assignment_operator = 24, RULE_left_hand_side_expression = 25, 
		RULE_member_expression = 26, RULE_this_expression = 27, RULE_identifier = 28, 
		RULE_logical_OR_expression = 29, RULE_logical_AND_expression = 30, RULE_equality_expression = 31, 
		RULE_relational_expression = 32, RULE_additive_expression = 33, RULE_multiplicative_expression = 34, 
		RULE_unary_expression = 35, RULE_call_expression = 36, RULE_super = 37, 
		RULE_callee = 38, RULE_arguments = 39, RULE_argument_list = 40, RULE_new_expression = 41, 
		RULE_primary_expression = 42, RULE_parenthesized_expression = 43, RULE_literal = 44, 
		RULE_true_literal = 45, RULE_false_literal = 46, RULE_numeric_literal = 47, 
		RULE_string_literal = 48;
	public static readonly string[] ruleNames = {
		"program", "prog", "stat", "expr", "statement", "class_declaration", "class_extends", 
		"iteration_statement", "for_statement", "do_while_statement", "while_statement", 
		"variable_statement", "variable_declaration_list", "variable_declaration", 
		"variable_initializer", "if_statement", "empty_statement", "return_statement", 
		"block_statement", "function_declaration", "formal_parameter_list", "expression_statement", 
		"expression", "assignment_expression", "assignment_operator", "left_hand_side_expression", 
		"member_expression", "this_expression", "identifier", "logical_OR_expression", 
		"logical_AND_expression", "equality_expression", "relational_expression", 
		"additive_expression", "multiplicative_expression", "unary_expression", 
		"call_expression", "super", "callee", "arguments", "argument_list", "new_expression", 
		"primary_expression", "parenthesized_expression", "literal", "true_literal", 
		"false_literal", "numeric_literal", "string_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "','", "'{'", "'}'", "'.'", "'['", "']'", null, 
		null, "'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", 
		"'for'", "'class'", "'extends'", "'this'", "'super'", "'new'", null, null, 
		null, "'true'", "'false'", "'+'", "'-'", null, "'*'", "'/'", null, null, 
		null, "'||'", "'&&'", null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "INT", "STRING", 
		"TRUE", "FALSE", "ADD", "SUB", "ADDITIVE_OPERATOR", "MUL", "DIV", "MULTIPLICATIVE_OPERATOR", 
		"EQUALITY_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", 
		"SIMPLE_ASSIGNMENT_OPERATOR", "COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER", 
		"NEWLINE", "SEMI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExodiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExodiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExodiaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 21995565543460L) != 0) {
				{
				{
				State = 98;
				statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 106;
				stat();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 21990299664388L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlankContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public BlankContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterBlank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitBlank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlank(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public PrintExprContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public AssignContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				expr(0);
				State = 112;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(IDENTIFIER);
				State = 115;
				Match(T__0);
				State = 116;
				expr(0);
				State = 117;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new BlankContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ExodiaParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ExodiaParser.DIV, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ExodiaParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ExodiaParser.SUB, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExodiaParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 123;
				Match(INT);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(IDENTIFIER);
				}
				break;
			case T__1:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				Match(T__1);
				State = 126;
				expr(0);
				State = 127;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 137;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 132;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 133;
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 134;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 135;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 136;
						expr(5);
						}
						break;
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case THIS:
			case SUPER:
			case NEW:
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
			case ADDITIVE_OPERATOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				expression_statement();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				empty_statement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				block_statement();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 145;
				function_declaration();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 146;
				return_statement();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 147;
				variable_statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 148;
				if_statement();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 149;
				iteration_statement();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 150;
				class_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ExodiaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_extendsContext class_extends() {
			return GetRuleContext<Class_extendsContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(CLASS);
			State = 154;
			identifier();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 155;
				class_extends();
				}
			}

			State = 158;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ExodiaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_extendsContext class_extends() {
		Class_extendsContext _localctx = new Class_extendsContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(EXTENDS);
			State = 161;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_iteration_statement);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				do_while_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				for_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExodiaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(FOR);
			State = 169;
			Match(T__1);
			State = 170;
			variable_statement();
			State = 171;
			equality_expression(0);
			State = 172;
			Match(SEMI);
			State = 173;
			expression();
			State = 174;
			Match(T__2);
			State = 175;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ExodiaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(DO);
			State = 178;
			statement();
			State = 179;
			Match(WHILE);
			State = 180;
			Match(T__1);
			State = 181;
			expression();
			State = 182;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(WHILE);
			State = 185;
			Match(T__1);
			State = 186;
			expression();
			State = 187;
			Match(T__2);
			State = 188;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ExodiaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(LET);
			State = 191;
			variable_declaration_list(0);
			State = 192;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_listContext variable_declaration_list() {
		return variable_declaration_list(0);
	}

	private Variable_declaration_listContext variable_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_declaration_listContext _localctx = new Variable_declaration_listContext(Context, _parentState);
		Variable_declaration_listContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_variable_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 195;
			variable_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Variable_declaration_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variable_declaration_list);
					State = 197;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 198;
					Match(T__3);
					State = 199;
					variable_declaration();
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			identifier();
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 206;
				variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(SIMPLE_ASSIGNMENT_OPERATOR);
			State = 210;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExodiaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExodiaParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_statement);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				Match(IF);
				State = 213;
				Match(T__1);
				State = 214;
				expression();
				State = 215;
				Match(T__2);
				State = 216;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(IF);
				State = 219;
				Match(T__1);
				State = 220;
				expression();
				State = 221;
				Match(T__2);
				State = 222;
				statement();
				State = 223;
				Match(ELSE);
				State = 224;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExodiaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(RETURN);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4403377471492L) != 0) {
				{
				State = 231;
				expression();
				}
			}

			State = 234;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(T__4);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 21995565543460L) != 0) {
				{
				{
				State = 237;
				statement();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ExodiaParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(FN);
			State = 246;
			identifier();
			State = 247;
			Match(T__1);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 248;
				formal_parameter_list(0);
				}
			}

			State = 251;
			Match(T__2);
			State = 252;
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		return formal_parameter_list(0);
	}

	private Formal_parameter_listContext formal_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, _parentState);
		Formal_parameter_listContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_formal_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 255;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Formal_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formal_parameter_list);
					State = 257;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 258;
					Match(T__3);
					State = 259;
					identifier();
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ExodiaParser.SEMI, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			expression();
			State = 266;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignment_expression);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				logical_OR_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				left_hand_side_expression();
				State = 272;
				assignment_operator();
				State = 273;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX_ASSIGMENT_OPERATOR() { return GetToken(ExodiaParser.COMPLEX_ASSIGMENT_OPERATOR, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !(_la==SIMPLE_ASSIGNMENT_OPERATOR || _la==COMPLEX_ASSIGMENT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_hand_side_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		public Left_hand_side_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_hand_side_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_hand_side_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_hand_side_expressionContext left_hand_side_expression() {
		Left_hand_side_expressionContext _localctx = new Left_hand_side_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_left_hand_side_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			member_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_expressionContext member_expression() {
		return member_expression(0);
	}

	private Member_expressionContext member_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_expressionContext _localctx = new Member_expressionContext(Context, _parentState);
		Member_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_member_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 282;
				identifier();
				}
				break;
			case THIS:
				{
				State = 283;
				this_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 286;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 287;
						Match(T__6);
						State = 288;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 289;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 290;
						Match(T__7);
						State = 291;
						expression();
						State = 292;
						Match(T__8);
						}
						break;
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(ExodiaParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_OR_expressionContext : ParserRuleContext {
		public Logical_OR_expressionContext left;
		public IToken op;
		public Logical_AND_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(ExodiaParser.LOGICAL_OR, 0); }
		public Logical_OR_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_OR_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_OR_expressionContext logical_OR_expression() {
		return logical_OR_expression(0);
	}

	private Logical_OR_expressionContext logical_OR_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_OR_expressionContext _localctx = new Logical_OR_expressionContext(Context, _parentState);
		Logical_OR_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_logical_OR_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 304;
			logical_AND_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_OR_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_OR_expression);
					State = 306;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 307;
					_localctx.op = Match(LOGICAL_OR);
					State = 308;
					_localctx.right = logical_AND_expression(0);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_AND_expressionContext : ParserRuleContext {
		public Logical_AND_expressionContext left;
		public IToken op;
		public Equality_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(ExodiaParser.LOGICAL_AND, 0); }
		public Logical_AND_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_AND_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_AND_expressionContext logical_AND_expression() {
		return logical_AND_expression(0);
	}

	private Logical_AND_expressionContext logical_AND_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_AND_expressionContext _localctx = new Logical_AND_expressionContext(Context, _parentState);
		Logical_AND_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_logical_AND_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_AND_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_AND_expression);
					State = 317;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 318;
					_localctx.op = Match(LOGICAL_AND);
					State = 319;
					_localctx.right = equality_expression(0);
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Equality_expressionContext left;
		public IToken op;
		public Relational_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY_OPERATOR() { return GetToken(ExodiaParser.EQUALITY_OPERATOR, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 326;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Equality_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
					State = 328;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 329;
					_localctx.op = Match(EQUALITY_OPERATOR);
					State = 330;
					_localctx.right = relational_expression(0);
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext left;
		public IToken op;
		public Additive_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL_OPERATOR() { return GetToken(ExodiaParser.RELATIONAL_OPERATOR, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 337;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 339;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 340;
					_localctx.op = Match(RELATIONAL_OPERATOR);
					State = 341;
					_localctx.right = additive_expression(0);
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext left;
		public IToken op;
		public Multiplicative_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_additive_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 348;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 350;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 351;
					_localctx.op = Match(ADDITIVE_OPERATOR);
					State = 352;
					_localctx.right = multiplicative_expression(0);
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext left;
		public IToken op;
		public Unary_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATOR() { return GetToken(ExodiaParser.MULTIPLICATIVE_OPERATOR, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_multiplicative_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 359;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 361;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 362;
					_localctx.op = Match(MULTIPLICATIVE_OPERATOR);
					State = 363;
					_localctx.right = unary_expression();
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_unary_expression);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370;
				call_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 371;
				Match(ADDITIVE_OPERATOR);
				State = 372;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public CalleeContext callee() {
			return GetRuleContext<CalleeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperContext super() {
			return GetRuleContext<SuperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		return call_expression(0);
	}

	private Call_expressionContext call_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_expressionContext _localctx = new Call_expressionContext(Context, _parentState);
		Call_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_call_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case IDENTIFIER:
				{
				State = 376;
				callee();
				State = 377;
				_localctx.args = arguments();
				}
				break;
			case SUPER:
				{
				State = 379;
				super();
				State = 380;
				_localctx.args = arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_expression);
					State = 384;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 385;
					_localctx.args = arguments();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(ExodiaParser.SUPER, 0); }
		public SuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_super; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperContext super() {
		SuperContext _localctx = new SuperContext(Context, State);
		EnterRule(_localctx, 74, RULE_super);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(SUPER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalleeContext : ParserRuleContext {
		public Left_hand_side_expressionContext lhse;
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		public CalleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalleeContext callee() {
		CalleeContext _localctx = new CalleeContext(Context, State);
		EnterRule(_localctx, 76, RULE_callee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_localctx.lhse = left_hand_side_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 78, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(T__1);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4403377471492L) != 0) {
				{
				State = 396;
				argument_list(0);
				}
			}

			State = 399;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 402;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Argument_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 404;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 405;
					Match(T__3);
					State = 406;
					assignment_expression();
					}
					} 
				}
				State = 411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class New_expressionContext : ParserRuleContext {
		public Member_expressionContext exp;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ExodiaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public New_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_expressionContext new_expression() {
		New_expressionContext _localctx = new New_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(NEW);
			State = 413;
			_localctx.exp = member_expression(0);
			State = 414;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_expressionContext new_expression() {
			return GetRuleContext<New_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_primary_expression);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case STRING:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				literal();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				member_expression(0);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				parenthesized_expression();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				new_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(T__1);
			State = 423;
			expression();
			State = 424;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public True_literalContext true_literal() {
			return GetRuleContext<True_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public False_literalContext false_literal() {
			return GetRuleContext<False_literalContext>(0);
		}
		public AtomContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_literal);
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 426;
				numeric_literal();
				}
				break;
			case STRING:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				string_literal();
				}
				break;
			case TRUE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 428;
				true_literal();
				}
				break;
			case FALSE:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 429;
				false_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class True_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExodiaParser.TRUE, 0); }
		public True_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public True_literalContext true_literal() {
		True_literalContext _localctx = new True_literalContext(Context, State);
		EnterRule(_localctx, 90, RULE_true_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class False_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExodiaParser.FALSE, 0); }
		public False_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public False_literalContext false_literal() {
		False_literalContext _localctx = new False_literalContext(Context, State);
		EnterRule(_localctx, 92, RULE_false_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExodiaParser.INT, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 94, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExodiaParser.STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 96, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		case 12: return variable_declaration_list_sempred((Variable_declaration_listContext)_localctx, predIndex);
		case 20: return formal_parameter_list_sempred((Formal_parameter_listContext)_localctx, predIndex);
		case 26: return member_expression_sempred((Member_expressionContext)_localctx, predIndex);
		case 29: return logical_OR_expression_sempred((Logical_OR_expressionContext)_localctx, predIndex);
		case 30: return logical_AND_expression_sempred((Logical_AND_expressionContext)_localctx, predIndex);
		case 31: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 32: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 33: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 34: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 36: return call_expression_sempred((Call_expressionContext)_localctx, predIndex);
		case 40: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool variable_declaration_list_sempred(Variable_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formal_parameter_list_sempred(Formal_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_expression_sempred(Member_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_OR_expression_sempred(Logical_OR_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_AND_expression_sempred(Logical_AND_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool call_expression_sempred(Call_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,44,441,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,5,0,100,
		8,0,10,0,12,0,103,9,0,1,0,1,0,1,1,4,1,108,8,1,11,1,12,1,109,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,121,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		130,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,138,8,3,10,3,12,3,141,9,3,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,152,8,4,1,5,1,5,1,5,3,5,157,8,5,1,5,1,
		5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,167,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,201,8,12,10,12,12,12,204,
		9,12,1,13,1,13,3,13,208,8,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,227,8,15,1,16,1,16,1,17,
		1,17,3,17,233,8,17,1,17,1,17,1,18,1,18,5,18,239,8,18,10,18,12,18,242,9,
		18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,250,8,19,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,1,20,1,20,5,20,261,8,20,10,20,12,20,264,9,20,1,21,1,21,1,21,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,276,8,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,26,3,26,285,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,
		295,8,26,10,26,12,26,298,9,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,
		1,29,1,29,5,29,310,8,29,10,29,12,29,313,9,29,1,30,1,30,1,30,1,30,1,30,
		1,30,5,30,321,8,30,10,30,12,30,324,9,30,1,31,1,31,1,31,1,31,1,31,1,31,
		5,31,332,8,31,10,31,12,31,335,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
		343,8,32,10,32,12,32,346,9,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,354,8,
		33,10,33,12,33,357,9,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,365,8,34,10,
		34,12,34,368,9,34,1,35,1,35,1,35,1,35,3,35,374,8,35,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,3,36,383,8,36,1,36,1,36,5,36,387,8,36,10,36,12,36,390,9,
		36,1,37,1,37,1,38,1,38,1,39,1,39,3,39,398,8,39,1,39,1,39,1,40,1,40,1,40,
		1,40,1,40,1,40,5,40,408,8,40,10,40,12,40,411,9,40,1,41,1,41,1,41,1,41,
		1,42,1,42,1,42,1,42,3,42,421,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
		44,3,44,431,8,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,0,12,6,24,
		40,52,58,60,62,64,66,68,72,80,49,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,96,0,3,1,0,33,34,1,0,30,31,1,0,40,41,439,
		0,101,1,0,0,0,2,107,1,0,0,0,4,120,1,0,0,0,6,129,1,0,0,0,8,151,1,0,0,0,
		10,153,1,0,0,0,12,160,1,0,0,0,14,166,1,0,0,0,16,168,1,0,0,0,18,177,1,0,
		0,0,20,184,1,0,0,0,22,190,1,0,0,0,24,194,1,0,0,0,26,205,1,0,0,0,28,209,
		1,0,0,0,30,226,1,0,0,0,32,228,1,0,0,0,34,230,1,0,0,0,36,236,1,0,0,0,38,
		245,1,0,0,0,40,254,1,0,0,0,42,265,1,0,0,0,44,268,1,0,0,0,46,275,1,0,0,
		0,48,277,1,0,0,0,50,279,1,0,0,0,52,284,1,0,0,0,54,299,1,0,0,0,56,301,1,
		0,0,0,58,303,1,0,0,0,60,314,1,0,0,0,62,325,1,0,0,0,64,336,1,0,0,0,66,347,
		1,0,0,0,68,358,1,0,0,0,70,373,1,0,0,0,72,382,1,0,0,0,74,391,1,0,0,0,76,
		393,1,0,0,0,78,395,1,0,0,0,80,401,1,0,0,0,82,412,1,0,0,0,84,420,1,0,0,
		0,86,422,1,0,0,0,88,430,1,0,0,0,90,432,1,0,0,0,92,434,1,0,0,0,94,436,1,
		0,0,0,96,438,1,0,0,0,98,100,3,8,4,0,99,98,1,0,0,0,100,103,1,0,0,0,101,
		99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,5,0,
		0,1,105,1,1,0,0,0,106,108,3,4,2,0,107,106,1,0,0,0,108,109,1,0,0,0,109,
		107,1,0,0,0,109,110,1,0,0,0,110,3,1,0,0,0,111,112,3,6,3,0,112,113,5,44,
		0,0,113,121,1,0,0,0,114,115,5,42,0,0,115,116,5,1,0,0,116,117,3,6,3,0,117,
		118,5,44,0,0,118,121,1,0,0,0,119,121,5,44,0,0,120,111,1,0,0,0,120,114,
		1,0,0,0,120,119,1,0,0,0,121,5,1,0,0,0,122,123,6,3,-1,0,123,130,5,26,0,
		0,124,130,5,42,0,0,125,126,5,2,0,0,126,127,3,6,3,0,127,128,5,3,0,0,128,
		130,1,0,0,0,129,122,1,0,0,0,129,124,1,0,0,0,129,125,1,0,0,0,130,139,1,
		0,0,0,131,132,10,5,0,0,132,133,7,0,0,0,133,138,3,6,3,6,134,135,10,4,0,
		0,135,136,7,1,0,0,136,138,3,6,3,5,137,131,1,0,0,0,137,134,1,0,0,0,138,
		141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,7,1,0,0,0,141,139,1,0,
		0,0,142,152,3,42,21,0,143,152,3,32,16,0,144,152,3,36,18,0,145,152,3,38,
		19,0,146,152,3,34,17,0,147,152,3,22,11,0,148,152,3,30,15,0,149,152,3,14,
		7,0,150,152,3,10,5,0,151,142,1,0,0,0,151,143,1,0,0,0,151,144,1,0,0,0,151,
		145,1,0,0,0,151,146,1,0,0,0,151,147,1,0,0,0,151,148,1,0,0,0,151,149,1,
		0,0,0,151,150,1,0,0,0,152,9,1,0,0,0,153,154,5,20,0,0,154,156,3,56,28,0,
		155,157,3,12,6,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,
		3,8,4,0,159,11,1,0,0,0,160,161,5,21,0,0,161,162,3,56,28,0,162,13,1,0,0,
		0,163,167,3,20,10,0,164,167,3,18,9,0,165,167,3,16,8,0,166,163,1,0,0,0,
		166,164,1,0,0,0,166,165,1,0,0,0,167,15,1,0,0,0,168,169,5,19,0,0,169,170,
		5,2,0,0,170,171,3,22,11,0,171,172,3,62,31,0,172,173,5,44,0,0,173,174,3,
		44,22,0,174,175,5,3,0,0,175,176,3,8,4,0,176,17,1,0,0,0,177,178,5,18,0,
		0,178,179,3,8,4,0,179,180,5,17,0,0,180,181,5,2,0,0,181,182,3,44,22,0,182,
		183,5,3,0,0,183,19,1,0,0,0,184,185,5,17,0,0,185,186,5,2,0,0,186,187,3,
		44,22,0,187,188,5,3,0,0,188,189,3,8,4,0,189,21,1,0,0,0,190,191,5,12,0,
		0,191,192,3,24,12,0,192,193,5,44,0,0,193,23,1,0,0,0,194,195,6,12,-1,0,
		195,196,3,26,13,0,196,202,1,0,0,0,197,198,10,1,0,0,198,199,5,4,0,0,199,
		201,3,26,13,0,200,197,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,
		1,0,0,0,203,25,1,0,0,0,204,202,1,0,0,0,205,207,3,56,28,0,206,208,3,28,
		14,0,207,206,1,0,0,0,207,208,1,0,0,0,208,27,1,0,0,0,209,210,5,40,0,0,210,
		211,3,46,23,0,211,29,1,0,0,0,212,213,5,15,0,0,213,214,5,2,0,0,214,215,
		3,44,22,0,215,216,5,3,0,0,216,217,3,8,4,0,217,227,1,0,0,0,218,219,5,15,
		0,0,219,220,5,2,0,0,220,221,3,44,22,0,221,222,5,3,0,0,222,223,3,8,4,0,
		223,224,5,16,0,0,224,225,3,8,4,0,225,227,1,0,0,0,226,212,1,0,0,0,226,218,
		1,0,0,0,227,31,1,0,0,0,228,229,5,44,0,0,229,33,1,0,0,0,230,232,5,13,0,
		0,231,233,3,44,22,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,
		235,5,44,0,0,235,35,1,0,0,0,236,240,5,5,0,0,237,239,3,8,4,0,238,237,1,
		0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,
		242,240,1,0,0,0,243,244,5,6,0,0,244,37,1,0,0,0,245,246,5,14,0,0,246,247,
		3,56,28,0,247,249,5,2,0,0,248,250,3,40,20,0,249,248,1,0,0,0,249,250,1,
		0,0,0,250,251,1,0,0,0,251,252,5,3,0,0,252,253,3,36,18,0,253,39,1,0,0,0,
		254,255,6,20,-1,0,255,256,3,56,28,0,256,262,1,0,0,0,257,258,10,1,0,0,258,
		259,5,4,0,0,259,261,3,56,28,0,260,257,1,0,0,0,261,264,1,0,0,0,262,260,
		1,0,0,0,262,263,1,0,0,0,263,41,1,0,0,0,264,262,1,0,0,0,265,266,3,44,22,
		0,266,267,5,44,0,0,267,43,1,0,0,0,268,269,3,46,23,0,269,45,1,0,0,0,270,
		276,3,58,29,0,271,272,3,50,25,0,272,273,3,48,24,0,273,274,3,46,23,0,274,
		276,1,0,0,0,275,270,1,0,0,0,275,271,1,0,0,0,276,47,1,0,0,0,277,278,7,2,
		0,0,278,49,1,0,0,0,279,280,3,52,26,0,280,51,1,0,0,0,281,282,6,26,-1,0,
		282,285,3,56,28,0,283,285,3,54,27,0,284,281,1,0,0,0,284,283,1,0,0,0,285,
		296,1,0,0,0,286,287,10,2,0,0,287,288,5,7,0,0,288,295,3,56,28,0,289,290,
		10,1,0,0,290,291,5,8,0,0,291,292,3,44,22,0,292,293,5,9,0,0,293,295,1,0,
		0,0,294,286,1,0,0,0,294,289,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,
		297,1,0,0,0,297,53,1,0,0,0,298,296,1,0,0,0,299,300,5,22,0,0,300,55,1,0,
		0,0,301,302,5,42,0,0,302,57,1,0,0,0,303,304,6,29,-1,0,304,305,3,60,30,
		0,305,311,1,0,0,0,306,307,10,1,0,0,307,308,5,38,0,0,308,310,3,60,30,0,
		309,306,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,59,
		1,0,0,0,313,311,1,0,0,0,314,315,6,30,-1,0,315,316,3,62,31,0,316,322,1,
		0,0,0,317,318,10,1,0,0,318,319,5,39,0,0,319,321,3,62,31,0,320,317,1,0,
		0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,61,1,0,0,0,324,
		322,1,0,0,0,325,326,6,31,-1,0,326,327,3,64,32,0,327,333,1,0,0,0,328,329,
		10,1,0,0,329,330,5,36,0,0,330,332,3,64,32,0,331,328,1,0,0,0,332,335,1,
		0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,63,1,0,0,0,335,333,1,0,0,0,336,
		337,6,32,-1,0,337,338,3,66,33,0,338,344,1,0,0,0,339,340,10,1,0,0,340,341,
		5,37,0,0,341,343,3,66,33,0,342,339,1,0,0,0,343,346,1,0,0,0,344,342,1,0,
		0,0,344,345,1,0,0,0,345,65,1,0,0,0,346,344,1,0,0,0,347,348,6,33,-1,0,348,
		349,3,68,34,0,349,355,1,0,0,0,350,351,10,1,0,0,351,352,5,32,0,0,352,354,
		3,68,34,0,353,350,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,
		0,0,356,67,1,0,0,0,357,355,1,0,0,0,358,359,6,34,-1,0,359,360,3,70,35,0,
		360,366,1,0,0,0,361,362,10,1,0,0,362,363,5,35,0,0,363,365,3,70,35,0,364,
		361,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,69,1,0,
		0,0,368,366,1,0,0,0,369,374,3,84,42,0,370,374,3,72,36,0,371,372,5,32,0,
		0,372,374,3,70,35,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,0,0,0,374,
		71,1,0,0,0,375,376,6,36,-1,0,376,377,3,76,38,0,377,378,3,78,39,0,378,383,
		1,0,0,0,379,380,3,74,37,0,380,381,3,78,39,0,381,383,1,0,0,0,382,375,1,
		0,0,0,382,379,1,0,0,0,383,388,1,0,0,0,384,385,10,1,0,0,385,387,3,78,39,
		0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,
		73,1,0,0,0,390,388,1,0,0,0,391,392,5,23,0,0,392,75,1,0,0,0,393,394,3,50,
		25,0,394,77,1,0,0,0,395,397,5,2,0,0,396,398,3,80,40,0,397,396,1,0,0,0,
		397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,3,0,0,400,79,1,0,0,0,401,402,
		6,40,-1,0,402,403,3,46,23,0,403,409,1,0,0,0,404,405,10,1,0,0,405,406,5,
		4,0,0,406,408,3,46,23,0,407,404,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,
		0,409,410,1,0,0,0,410,81,1,0,0,0,411,409,1,0,0,0,412,413,5,24,0,0,413,
		414,3,52,26,0,414,415,3,78,39,0,415,83,1,0,0,0,416,421,3,88,44,0,417,421,
		3,52,26,0,418,421,3,86,43,0,419,421,3,82,41,0,420,416,1,0,0,0,420,417,
		1,0,0,0,420,418,1,0,0,0,420,419,1,0,0,0,421,85,1,0,0,0,422,423,5,2,0,0,
		423,424,3,44,22,0,424,425,5,3,0,0,425,87,1,0,0,0,426,431,3,94,47,0,427,
		431,3,96,48,0,428,431,3,90,45,0,429,431,3,92,46,0,430,426,1,0,0,0,430,
		427,1,0,0,0,430,428,1,0,0,0,430,429,1,0,0,0,431,89,1,0,0,0,432,433,5,28,
		0,0,433,91,1,0,0,0,434,435,5,29,0,0,435,93,1,0,0,0,436,437,5,26,0,0,437,
		95,1,0,0,0,438,439,5,27,0,0,439,97,1,0,0,0,33,101,109,120,129,137,139,
		151,156,166,202,207,226,232,240,249,262,275,284,294,296,311,322,333,344,
		355,366,373,382,388,397,409,420,430
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
