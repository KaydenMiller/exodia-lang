//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interperter.ExodiaLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SINGLE_COMMENT=10, BLOCK_COMMENT=11, LET=12, RETURN=13, FN=14, IF=15, 
		ELSE=16, WHILE=17, DO=18, FOR=19, CLASS=20, EXTENDS=21, THIS=22, SUPER=23, 
		NEW=24, WHITESPACE=25, NUMBER=26, STRING=27, TRUE=28, FALSE=29, ADDITIVE_OPERATOR=30, 
		MULTIPLICATIVE_OPERATOR=31, EQUALITY_OPERATOR=32, RELATIONAL_OPERATOR=33, 
		LOGICAL_OR=34, LOGICAL_AND=35, SIMPLE_ASSIGNMENT_OPERATOR=36, COMPLEX_ASSIGMENT_OPERATOR=37, 
		IDENTIFIER=38;
	public const int
		RULE_program = 0, RULE_statement_list = 1, RULE_statement = 2, RULE_class_declaration = 3, 
		RULE_class_extends = 4, RULE_iteration_statement = 5, RULE_for_statement = 6, 
		RULE_do_while_statement = 7, RULE_while_statement = 8, RULE_variable_statement = 9, 
		RULE_variable_declaration_list = 10, RULE_variable_declaration = 11, RULE_variable_initializer = 12, 
		RULE_if_statement = 13, RULE_empty_statement = 14, RULE_return_statement = 15, 
		RULE_block_statement = 16, RULE_function_declaration = 17, RULE_formal_parameter_list = 18, 
		RULE_expression_statement = 19, RULE_expression = 20, RULE_assignment_expression = 21, 
		RULE_assignment_operator = 22, RULE_left_hand_side_expression = 23, RULE_member_expression = 24, 
		RULE_this_expression = 25, RULE_identifier = 26, RULE_logical_OR_expression = 27, 
		RULE_logical_AND_expression = 28, RULE_equality_expression = 29, RULE_relational_expression = 30, 
		RULE_additive_expression = 31, RULE_multiplicative_expression = 32, RULE_unary_expression = 33, 
		RULE_call_expression = 34, RULE_super = 35, RULE_callee = 36, RULE_arguments = 37, 
		RULE_argument_list = 38, RULE_new_expression = 39, RULE_primary_expression = 40, 
		RULE_parenthesized_expression = 41, RULE_literal = 42, RULE_true_literal = 43, 
		RULE_false_literal = 44, RULE_numeric_literal = 45, RULE_string_literal = 46;
	public static readonly string[] ruleNames = {
		"program", "statement_list", "statement", "class_declaration", "class_extends", 
		"iteration_statement", "for_statement", "do_while_statement", "while_statement", 
		"variable_statement", "variable_declaration_list", "variable_declaration", 
		"variable_initializer", "if_statement", "empty_statement", "return_statement", 
		"block_statement", "function_declaration", "formal_parameter_list", "expression_statement", 
		"expression", "assignment_expression", "assignment_operator", "left_hand_side_expression", 
		"member_expression", "this_expression", "identifier", "logical_OR_expression", 
		"logical_AND_expression", "equality_expression", "relational_expression", 
		"additive_expression", "multiplicative_expression", "unary_expression", 
		"call_expression", "super", "callee", "arguments", "argument_list", "new_expression", 
		"primary_expression", "parenthesized_expression", "literal", "true_literal", 
		"false_literal", "numeric_literal", "string_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "';'", "')'", "','", "'{'", "'}'", "'.'", "'['", "']'", null, 
		null, "'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", 
		"'for'", "'class'", "'extends'", "'this'", "'super'", "'new'", null, null, 
		null, "'true'", "'false'", null, null, null, null, "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "NUMBER", "STRING", 
		"TRUE", "FALSE", "ADDITIVE_OPERATOR", "MULTIPLICATIVE_OPERATOR", "EQUALITY_OPERATOR", 
		"RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", "SIMPLE_ASSIGNMENT_OPERATOR", 
		"COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExodiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExodiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExodiaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276989669414L) != 0) {
				{
				State = 94;
				statement_list(0);
				}
			}

			State = 97;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 100;
			statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Statement_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 102;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 103;
					statement();
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case THIS:
			case SUPER:
			case NEW:
			case NUMBER:
			case STRING:
			case TRUE:
			case FALSE:
			case ADDITIVE_OPERATOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				expression_statement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				empty_statement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				block_statement();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				function_declaration();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 113;
				return_statement();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 114;
				variable_statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 115;
				if_statement();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 116;
				iteration_statement();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 117;
				class_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ExodiaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_extendsContext class_extends() {
			return GetRuleContext<Class_extendsContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(CLASS);
			State = 121;
			identifier();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 122;
				class_extends();
				}
			}

			State = 125;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ExodiaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_extendsContext class_extends() {
		Class_extendsContext _localctx = new Class_extendsContext(Context, State);
		EnterRule(_localctx, 8, RULE_class_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(EXTENDS);
			State = 128;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_iteration_statement);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				do_while_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				for_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExodiaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(FOR);
			State = 136;
			Match(T__0);
			State = 137;
			variable_statement();
			State = 138;
			equality_expression(0);
			State = 139;
			Match(T__1);
			State = 140;
			expression();
			State = 141;
			Match(T__2);
			State = 142;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ExodiaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(DO);
			State = 145;
			statement();
			State = 146;
			Match(WHILE);
			State = 147;
			Match(T__0);
			State = 148;
			expression();
			State = 149;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExodiaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(WHILE);
			State = 152;
			Match(T__0);
			State = 153;
			expression();
			State = 154;
			Match(T__2);
			State = 155;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ExodiaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(LET);
			State = 158;
			variable_declaration_list(0);
			State = 159;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_listContext variable_declaration_list() {
			return GetRuleContext<Variable_declaration_listContext>(0);
		}
		public Variable_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_listContext variable_declaration_list() {
		return variable_declaration_list(0);
	}

	private Variable_declaration_listContext variable_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_declaration_listContext _localctx = new Variable_declaration_listContext(Context, _parentState);
		Variable_declaration_listContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_variable_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 162;
			variable_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Variable_declaration_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variable_declaration_list);
					State = 164;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 165;
					Match(T__3);
					State = 166;
					variable_declaration();
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			identifier();
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 173;
				variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(SIMPLE_ASSIGNMENT_OPERATOR);
			State = 177;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExodiaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExodiaParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				Match(IF);
				State = 180;
				Match(T__0);
				State = 181;
				expression();
				State = 182;
				Match(T__2);
				State = 183;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(IF);
				State = 186;
				Match(T__0);
				State = 187;
				expression();
				State = 188;
				Match(T__2);
				State = 189;
				statement();
				State = 190;
				Match(ELSE);
				State = 191;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExodiaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(RETURN);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276987641858L) != 0) {
				{
				State = 198;
				expression();
				}
			}

			State = 201;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__4);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276989669414L) != 0) {
				{
				State = 204;
				statement_list(0);
				}
			}

			State = 207;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ExodiaParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(FN);
			State = 210;
			identifier();
			State = 211;
			Match(T__0);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 212;
				formal_parameter_list(0);
				}
			}

			State = 215;
			Match(T__2);
			State = 216;
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		return formal_parameter_list(0);
	}

	private Formal_parameter_listContext formal_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, _parentState);
		Formal_parameter_listContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_formal_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 219;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Formal_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formal_parameter_list);
					State = 221;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 222;
					Match(T__3);
					State = 223;
					identifier();
					}
					} 
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			expression();
			State = 230;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment_expression);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				logical_OR_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				left_hand_side_expression();
				State = 236;
				assignment_operator();
				State = 237;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_ASSIGNMENT_OPERATOR() { return GetToken(ExodiaParser.SIMPLE_ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX_ASSIGMENT_OPERATOR() { return GetToken(ExodiaParser.COMPLEX_ASSIGMENT_OPERATOR, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !(_la==SIMPLE_ASSIGNMENT_OPERATOR || _la==COMPLEX_ASSIGMENT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_hand_side_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		public Left_hand_side_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_hand_side_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLeft_hand_side_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_hand_side_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_hand_side_expressionContext left_hand_side_expression() {
		Left_hand_side_expressionContext _localctx = new Left_hand_side_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_left_hand_side_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			member_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMember_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_expressionContext member_expression() {
		return member_expression(0);
	}

	private Member_expressionContext member_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_expressionContext _localctx = new Member_expressionContext(Context, _parentState);
		Member_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_member_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 246;
				identifier();
				}
				break;
			case THIS:
				{
				State = 247;
				this_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 258;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 250;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 251;
						Match(T__6);
						State = 252;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new Member_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_member_expression);
						State = 253;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 254;
						Match(T__7);
						State = 255;
						expression();
						State = 256;
						Match(T__8);
						}
						break;
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(ExodiaParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExodiaParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_OR_expressionContext : ParserRuleContext {
		public Logical_OR_expressionContext left;
		public IToken op;
		public Logical_AND_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_expressionContext logical_OR_expression() {
			return GetRuleContext<Logical_OR_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(ExodiaParser.LOGICAL_OR, 0); }
		public Logical_OR_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_OR_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_OR_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_OR_expressionContext logical_OR_expression() {
		return logical_OR_expression(0);
	}

	private Logical_OR_expressionContext logical_OR_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_OR_expressionContext _localctx = new Logical_OR_expressionContext(Context, _parentState);
		Logical_OR_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_logical_OR_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 268;
			logical_AND_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_OR_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_OR_expression);
					State = 270;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 271;
					_localctx.op = Match(LOGICAL_OR);
					State = 272;
					_localctx.right = logical_AND_expression(0);
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_AND_expressionContext : ParserRuleContext {
		public Logical_AND_expressionContext left;
		public IToken op;
		public Equality_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_expressionContext logical_AND_expression() {
			return GetRuleContext<Logical_AND_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(ExodiaParser.LOGICAL_AND, 0); }
		public Logical_AND_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_AND_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLogical_AND_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_AND_expressionContext logical_AND_expression() {
		return logical_AND_expression(0);
	}

	private Logical_AND_expressionContext logical_AND_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_AND_expressionContext _localctx = new Logical_AND_expressionContext(Context, _parentState);
		Logical_AND_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_logical_AND_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 279;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_AND_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_AND_expression);
					State = 281;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 282;
					_localctx.op = Match(LOGICAL_AND);
					State = 283;
					_localctx.right = equality_expression(0);
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Equality_expressionContext left;
		public IToken op;
		public Relational_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY_OPERATOR() { return GetToken(ExodiaParser.EQUALITY_OPERATOR, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 290;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Equality_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
					State = 292;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 293;
					_localctx.op = Match(EQUALITY_OPERATOR);
					State = 294;
					_localctx.right = relational_expression(0);
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext left;
		public IToken op;
		public Additive_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL_OPERATOR() { return GetToken(ExodiaParser.RELATIONAL_OPERATOR, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 301;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 303;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 304;
					_localctx.op = Match(RELATIONAL_OPERATOR);
					State = 305;
					_localctx.right = additive_expression(0);
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext left;
		public IToken op;
		public Multiplicative_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_additive_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 312;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 319;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 314;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 315;
					_localctx.op = Match(ADDITIVE_OPERATOR);
					State = 316;
					_localctx.right = multiplicative_expression(0);
					}
					} 
				}
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext left;
		public IToken op;
		public Unary_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATOR() { return GetToken(ExodiaParser.MULTIPLICATIVE_OPERATOR, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_multiplicative_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 323;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 325;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 326;
					_localctx.op = Match(MULTIPLICATIVE_OPERATOR);
					State = 327;
					_localctx.right = unary_expression();
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE_OPERATOR() { return GetToken(ExodiaParser.ADDITIVE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_unary_expression);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				call_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				Match(ADDITIVE_OPERATOR);
				State = 336;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public CalleeContext callee() {
			return GetRuleContext<CalleeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperContext super() {
			return GetRuleContext<SuperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		return call_expression(0);
	}

	private Call_expressionContext call_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_expressionContext _localctx = new Call_expressionContext(Context, _parentState);
		Call_expressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_call_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case IDENTIFIER:
				{
				State = 340;
				callee();
				State = 341;
				_localctx.args = arguments();
				}
				break;
			case SUPER:
				{
				State = 343;
				super();
				State = 344;
				_localctx.args = arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 352;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_expression);
					State = 348;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 349;
					_localctx.args = arguments();
					}
					} 
				}
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(ExodiaParser.SUPER, 0); }
		public SuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_super; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperContext super() {
		SuperContext _localctx = new SuperContext(Context, State);
		EnterRule(_localctx, 70, RULE_super);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(SUPER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalleeContext : ParserRuleContext {
		public Left_hand_side_expressionContext lhse;
		[System.Diagnostics.DebuggerNonUserCode] public Left_hand_side_expressionContext left_hand_side_expression() {
			return GetRuleContext<Left_hand_side_expressionContext>(0);
		}
		public CalleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitCallee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalleeContext callee() {
		CalleeContext _localctx = new CalleeContext(Context, State);
		EnterRule(_localctx, 72, RULE_callee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_localctx.lhse = left_hand_side_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 74, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(T__0);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276987641858L) != 0) {
				{
				State = 360;
				argument_list(0);
				}
			}

			State = 363;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 366;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Argument_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 368;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 369;
					Match(T__3);
					State = 370;
					assignment_expression();
					}
					} 
				}
				State = 375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class New_expressionContext : ParserRuleContext {
		public Member_expressionContext exp;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ExodiaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public New_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNew_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_expressionContext new_expression() {
		New_expressionContext _localctx = new New_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(NEW);
			State = 377;
			_localctx.exp = member_expression(0);
			State = 378;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_expressionContext member_expression() {
			return GetRuleContext<Member_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_expressionContext new_expression() {
			return GetRuleContext<New_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_primary_expression);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				literal();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				member_expression(0);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 382;
				parenthesized_expression();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 383;
				new_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(T__0);
			State = 387;
			expression();
			State = 388;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public True_literalContext true_literal() {
			return GetRuleContext<True_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public False_literalContext false_literal() {
			return GetRuleContext<False_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_literal);
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				numeric_literal();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				string_literal();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				true_literal();
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 393;
				false_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class True_literalContext : ParserRuleContext {
		public IToken atom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExodiaParser.TRUE, 0); }
		public True_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitTrue_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public True_literalContext true_literal() {
		True_literalContext _localctx = new True_literalContext(Context, State);
		EnterRule(_localctx, 86, RULE_true_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_localctx.atom = Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class False_literalContext : ParserRuleContext {
		public IToken atom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExodiaParser.FALSE, 0); }
		public False_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitFalse_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public False_literalContext false_literal() {
		False_literalContext _localctx = new False_literalContext(Context, State);
		EnterRule(_localctx, 88, RULE_false_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_localctx.atom = Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		public IToken atom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExodiaParser.NUMBER, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 90, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_localctx.atom = Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public IToken atom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExodiaParser.STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExodiaListener typedListener = listener as IExodiaListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExodiaVisitor<TResult> typedVisitor = visitor as IExodiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 92, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_localctx.atom = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 10: return variable_declaration_list_sempred((Variable_declaration_listContext)_localctx, predIndex);
		case 18: return formal_parameter_list_sempred((Formal_parameter_listContext)_localctx, predIndex);
		case 24: return member_expression_sempred((Member_expressionContext)_localctx, predIndex);
		case 27: return logical_OR_expression_sempred((Logical_OR_expressionContext)_localctx, predIndex);
		case 28: return logical_AND_expression_sempred((Logical_AND_expressionContext)_localctx, predIndex);
		case 29: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 30: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 31: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 32: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 34: return call_expression_sempred((Call_expressionContext)_localctx, predIndex);
		case 38: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool variable_declaration_list_sempred(Variable_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formal_parameter_list_sempred(Formal_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_expression_sempred(Member_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_OR_expression_sempred(Logical_OR_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_AND_expression_sempred(Logical_AND_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool call_expression_sempred(Call_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,405,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,3,0,96,8,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,5,1,105,8,1,10,1,12,1,108,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,119,8,2,1,3,1,3,1,3,3,3,124,8,3,1,3,1,3,1,4,1,4,1,4,1,5,1,
		5,1,5,3,5,134,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,10,5,10,168,8,10,10,10,12,10,171,9,10,1,11,1,11,3,11,175,8,11,1,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,3,13,194,8,13,1,14,1,14,1,15,1,15,3,15,200,8,15,1,15,1,15,
		1,16,1,16,3,16,206,8,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,214,8,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,225,8,18,10,18,12,18,228,
		9,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,240,8,21,1,
		22,1,22,1,23,1,23,1,24,1,24,1,24,3,24,249,8,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,5,24,259,8,24,10,24,12,24,262,9,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,27,1,27,1,27,1,27,5,27,274,8,27,10,27,12,27,277,9,27,1,28,
		1,28,1,28,1,28,1,28,1,28,5,28,285,8,28,10,28,12,28,288,9,28,1,29,1,29,
		1,29,1,29,1,29,1,29,5,29,296,8,29,10,29,12,29,299,9,29,1,30,1,30,1,30,
		1,30,1,30,1,30,5,30,307,8,30,10,30,12,30,310,9,30,1,31,1,31,1,31,1,31,
		1,31,1,31,5,31,318,8,31,10,31,12,31,321,9,31,1,32,1,32,1,32,1,32,1,32,
		1,32,5,32,329,8,32,10,32,12,32,332,9,32,1,33,1,33,1,33,1,33,3,33,338,8,
		33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,347,8,34,1,34,1,34,5,34,351,
		8,34,10,34,12,34,354,9,34,1,35,1,35,1,36,1,36,1,37,1,37,3,37,362,8,37,
		1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,372,8,38,10,38,12,38,375,
		9,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,385,8,40,1,41,1,41,1,
		41,1,41,1,42,1,42,1,42,1,42,3,42,395,8,42,1,43,1,43,1,44,1,44,1,45,1,45,
		1,46,1,46,1,46,0,12,2,20,36,48,54,56,58,60,62,64,68,76,47,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,0,1,1,0,36,37,399,0,
		95,1,0,0,0,2,99,1,0,0,0,4,118,1,0,0,0,6,120,1,0,0,0,8,127,1,0,0,0,10,133,
		1,0,0,0,12,135,1,0,0,0,14,144,1,0,0,0,16,151,1,0,0,0,18,157,1,0,0,0,20,
		161,1,0,0,0,22,172,1,0,0,0,24,176,1,0,0,0,26,193,1,0,0,0,28,195,1,0,0,
		0,30,197,1,0,0,0,32,203,1,0,0,0,34,209,1,0,0,0,36,218,1,0,0,0,38,229,1,
		0,0,0,40,232,1,0,0,0,42,239,1,0,0,0,44,241,1,0,0,0,46,243,1,0,0,0,48,248,
		1,0,0,0,50,263,1,0,0,0,52,265,1,0,0,0,54,267,1,0,0,0,56,278,1,0,0,0,58,
		289,1,0,0,0,60,300,1,0,0,0,62,311,1,0,0,0,64,322,1,0,0,0,66,337,1,0,0,
		0,68,346,1,0,0,0,70,355,1,0,0,0,72,357,1,0,0,0,74,359,1,0,0,0,76,365,1,
		0,0,0,78,376,1,0,0,0,80,384,1,0,0,0,82,386,1,0,0,0,84,394,1,0,0,0,86,396,
		1,0,0,0,88,398,1,0,0,0,90,400,1,0,0,0,92,402,1,0,0,0,94,96,3,2,1,0,95,
		94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,5,0,0,1,98,1,1,0,0,0,99,100,
		6,1,-1,0,100,101,3,4,2,0,101,106,1,0,0,0,102,103,10,1,0,0,103,105,3,4,
		2,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		3,1,0,0,0,108,106,1,0,0,0,109,119,3,38,19,0,110,119,3,28,14,0,111,119,
		3,32,16,0,112,119,3,34,17,0,113,119,3,30,15,0,114,119,3,18,9,0,115,119,
		3,26,13,0,116,119,3,10,5,0,117,119,3,6,3,0,118,109,1,0,0,0,118,110,1,0,
		0,0,118,111,1,0,0,0,118,112,1,0,0,0,118,113,1,0,0,0,118,114,1,0,0,0,118,
		115,1,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,5,1,0,0,0,120,121,5,20,
		0,0,121,123,3,52,26,0,122,124,3,8,4,0,123,122,1,0,0,0,123,124,1,0,0,0,
		124,125,1,0,0,0,125,126,3,4,2,0,126,7,1,0,0,0,127,128,5,21,0,0,128,129,
		3,52,26,0,129,9,1,0,0,0,130,134,3,16,8,0,131,134,3,14,7,0,132,134,3,12,
		6,0,133,130,1,0,0,0,133,131,1,0,0,0,133,132,1,0,0,0,134,11,1,0,0,0,135,
		136,5,19,0,0,136,137,5,1,0,0,137,138,3,18,9,0,138,139,3,58,29,0,139,140,
		5,2,0,0,140,141,3,40,20,0,141,142,5,3,0,0,142,143,3,4,2,0,143,13,1,0,0,
		0,144,145,5,18,0,0,145,146,3,4,2,0,146,147,5,17,0,0,147,148,5,1,0,0,148,
		149,3,40,20,0,149,150,5,3,0,0,150,15,1,0,0,0,151,152,5,17,0,0,152,153,
		5,1,0,0,153,154,3,40,20,0,154,155,5,3,0,0,155,156,3,4,2,0,156,17,1,0,0,
		0,157,158,5,12,0,0,158,159,3,20,10,0,159,160,5,2,0,0,160,19,1,0,0,0,161,
		162,6,10,-1,0,162,163,3,22,11,0,163,169,1,0,0,0,164,165,10,1,0,0,165,166,
		5,4,0,0,166,168,3,22,11,0,167,164,1,0,0,0,168,171,1,0,0,0,169,167,1,0,
		0,0,169,170,1,0,0,0,170,21,1,0,0,0,171,169,1,0,0,0,172,174,3,52,26,0,173,
		175,3,24,12,0,174,173,1,0,0,0,174,175,1,0,0,0,175,23,1,0,0,0,176,177,5,
		36,0,0,177,178,3,42,21,0,178,25,1,0,0,0,179,180,5,15,0,0,180,181,5,1,0,
		0,181,182,3,40,20,0,182,183,5,3,0,0,183,184,3,4,2,0,184,194,1,0,0,0,185,
		186,5,15,0,0,186,187,5,1,0,0,187,188,3,40,20,0,188,189,5,3,0,0,189,190,
		3,4,2,0,190,191,5,16,0,0,191,192,3,4,2,0,192,194,1,0,0,0,193,179,1,0,0,
		0,193,185,1,0,0,0,194,27,1,0,0,0,195,196,5,2,0,0,196,29,1,0,0,0,197,199,
		5,13,0,0,198,200,3,40,20,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,
		0,0,201,202,5,2,0,0,202,31,1,0,0,0,203,205,5,5,0,0,204,206,3,2,1,0,205,
		204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,5,6,0,0,208,33,1,0,
		0,0,209,210,5,14,0,0,210,211,3,52,26,0,211,213,5,1,0,0,212,214,3,36,18,
		0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,5,3,0,0,216,
		217,3,32,16,0,217,35,1,0,0,0,218,219,6,18,-1,0,219,220,3,52,26,0,220,226,
		1,0,0,0,221,222,10,1,0,0,222,223,5,4,0,0,223,225,3,52,26,0,224,221,1,0,
		0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,37,1,0,0,0,228,
		226,1,0,0,0,229,230,3,40,20,0,230,231,5,2,0,0,231,39,1,0,0,0,232,233,3,
		42,21,0,233,41,1,0,0,0,234,240,3,54,27,0,235,236,3,46,23,0,236,237,3,44,
		22,0,237,238,3,42,21,0,238,240,1,0,0,0,239,234,1,0,0,0,239,235,1,0,0,0,
		240,43,1,0,0,0,241,242,7,0,0,0,242,45,1,0,0,0,243,244,3,48,24,0,244,47,
		1,0,0,0,245,246,6,24,-1,0,246,249,3,52,26,0,247,249,3,50,25,0,248,245,
		1,0,0,0,248,247,1,0,0,0,249,260,1,0,0,0,250,251,10,2,0,0,251,252,5,7,0,
		0,252,259,3,52,26,0,253,254,10,1,0,0,254,255,5,8,0,0,255,256,3,40,20,0,
		256,257,5,9,0,0,257,259,1,0,0,0,258,250,1,0,0,0,258,253,1,0,0,0,259,262,
		1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,49,1,0,0,0,262,260,1,0,0,0,
		263,264,5,22,0,0,264,51,1,0,0,0,265,266,5,38,0,0,266,53,1,0,0,0,267,268,
		6,27,-1,0,268,269,3,56,28,0,269,275,1,0,0,0,270,271,10,1,0,0,271,272,5,
		34,0,0,272,274,3,56,28,0,273,270,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,
		0,275,276,1,0,0,0,276,55,1,0,0,0,277,275,1,0,0,0,278,279,6,28,-1,0,279,
		280,3,58,29,0,280,286,1,0,0,0,281,282,10,1,0,0,282,283,5,35,0,0,283,285,
		3,58,29,0,284,281,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,
		0,0,287,57,1,0,0,0,288,286,1,0,0,0,289,290,6,29,-1,0,290,291,3,60,30,0,
		291,297,1,0,0,0,292,293,10,1,0,0,293,294,5,32,0,0,294,296,3,60,30,0,295,
		292,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,59,1,0,
		0,0,299,297,1,0,0,0,300,301,6,30,-1,0,301,302,3,62,31,0,302,308,1,0,0,
		0,303,304,10,1,0,0,304,305,5,33,0,0,305,307,3,62,31,0,306,303,1,0,0,0,
		307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,61,1,0,0,0,310,308,
		1,0,0,0,311,312,6,31,-1,0,312,313,3,64,32,0,313,319,1,0,0,0,314,315,10,
		1,0,0,315,316,5,30,0,0,316,318,3,64,32,0,317,314,1,0,0,0,318,321,1,0,0,
		0,319,317,1,0,0,0,319,320,1,0,0,0,320,63,1,0,0,0,321,319,1,0,0,0,322,323,
		6,32,-1,0,323,324,3,66,33,0,324,330,1,0,0,0,325,326,10,1,0,0,326,327,5,
		31,0,0,327,329,3,66,33,0,328,325,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,
		0,330,331,1,0,0,0,331,65,1,0,0,0,332,330,1,0,0,0,333,338,3,80,40,0,334,
		338,3,68,34,0,335,336,5,30,0,0,336,338,3,66,33,0,337,333,1,0,0,0,337,334,
		1,0,0,0,337,335,1,0,0,0,338,67,1,0,0,0,339,340,6,34,-1,0,340,341,3,72,
		36,0,341,342,3,74,37,0,342,347,1,0,0,0,343,344,3,70,35,0,344,345,3,74,
		37,0,345,347,1,0,0,0,346,339,1,0,0,0,346,343,1,0,0,0,347,352,1,0,0,0,348,
		349,10,1,0,0,349,351,3,74,37,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,
		1,0,0,0,352,353,1,0,0,0,353,69,1,0,0,0,354,352,1,0,0,0,355,356,5,23,0,
		0,356,71,1,0,0,0,357,358,3,46,23,0,358,73,1,0,0,0,359,361,5,1,0,0,360,
		362,3,76,38,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,
		5,3,0,0,364,75,1,0,0,0,365,366,6,38,-1,0,366,367,3,42,21,0,367,373,1,0,
		0,0,368,369,10,1,0,0,369,370,5,4,0,0,370,372,3,42,21,0,371,368,1,0,0,0,
		372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,77,1,0,0,0,375,373,
		1,0,0,0,376,377,5,24,0,0,377,378,3,48,24,0,378,379,3,74,37,0,379,79,1,
		0,0,0,380,385,3,84,42,0,381,385,3,48,24,0,382,385,3,82,41,0,383,385,3,
		78,39,0,384,380,1,0,0,0,384,381,1,0,0,0,384,382,1,0,0,0,384,383,1,0,0,
		0,385,81,1,0,0,0,386,387,5,1,0,0,387,388,3,40,20,0,388,389,5,3,0,0,389,
		83,1,0,0,0,390,395,3,90,45,0,391,395,3,92,46,0,392,395,3,86,43,0,393,395,
		3,88,44,0,394,390,1,0,0,0,394,391,1,0,0,0,394,392,1,0,0,0,394,393,1,0,
		0,0,395,85,1,0,0,0,396,397,5,28,0,0,397,87,1,0,0,0,398,399,5,29,0,0,399,
		89,1,0,0,0,400,401,5,26,0,0,401,91,1,0,0,0,402,403,5,27,0,0,403,93,1,0,
		0,0,29,95,106,118,123,133,169,174,193,199,205,213,226,239,248,258,260,
		275,286,297,308,319,330,337,346,352,361,373,384,394
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Interperter.ExodiaLang
