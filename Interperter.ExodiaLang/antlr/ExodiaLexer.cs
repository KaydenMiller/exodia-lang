//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SINGLE_COMMENT=10, BLOCK_COMMENT=11, LET=12, RETURN=13, FN=14, IF=15, 
		ELSE=16, WHILE=17, DO=18, FOR=19, CLASS=20, EXTENDS=21, THIS=22, SUPER=23, 
		NEW=24, WHITESPACE=25, INT=26, STRING=27, TRUE=28, FALSE=29, ADDITIVE_OPERATOR=30, 
		MULTIPLICATIVE_OPERATOR=31, EQUALITY_OPERATOR=32, RELATIONAL_OPERATOR=33, 
		LOGICAL_OR=34, LOGICAL_AND=35, SIMPLE_ASSIGNMENT_OPERATOR=36, COMPLEX_ASSIGMENT_OPERATOR=37, 
		IDENTIFIER=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"SINGLE_COMMENT", "BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", 
		"WHILE", "DO", "FOR", "CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", 
		"INT", "STRING", "TRUE", "FALSE", "ADDITIVE_OPERATOR", "MULTIPLICATIVE_OPERATOR", 
		"EQUALITY_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", 
		"SIMPLE_ASSIGNMENT_OPERATOR", "COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER"
	};


	public ExodiaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExodiaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'('", "';'", "')'", "'.'", "'['", "']'", null, 
		null, "'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", 
		"'for'", "'class'", "'extends'", "'this'", "'super'", "'new'", null, null, 
		null, "'true'", "'false'", null, null, null, null, "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "INT", "STRING", 
		"TRUE", "FALSE", "ADDITIVE_OPERATOR", "MULTIPLICATIVE_OPERATOR", "EQUALITY_OPERATOR", 
		"RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", "SIMPLE_ASSIGNMENT_OPERATOR", 
		"COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,5,9,100,8,9,10,9,12,9,103,9,
		9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,111,8,10,10,10,12,10,114,9,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,4,24,
		186,8,24,11,24,12,24,187,1,24,1,24,1,25,4,25,193,8,25,11,25,12,25,194,
		1,26,1,26,5,26,199,8,26,10,26,12,26,202,9,26,1,26,1,26,1,27,1,27,1,27,
		1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
		1,31,1,32,1,32,3,32,226,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
		36,1,36,1,36,1,37,1,37,5,37,241,8,37,10,37,12,37,244,9,37,1,112,0,38,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,
		0,12,2,0,10,10,13,13,3,0,9,10,12,13,32,32,1,0,48,57,1,0,34,34,2,0,43,43,
		45,45,2,0,42,42,47,47,2,0,33,33,61,61,2,0,60,60,62,62,1,0,61,61,3,0,42,
		43,45,45,47,47,2,0,65,90,97,122,3,0,49,57,65,90,97,122,251,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,
		1,0,0,0,5,81,1,0,0,0,7,83,1,0,0,0,9,85,1,0,0,0,11,87,1,0,0,0,13,89,1,0,
		0,0,15,91,1,0,0,0,17,93,1,0,0,0,19,95,1,0,0,0,21,106,1,0,0,0,23,120,1,
		0,0,0,25,124,1,0,0,0,27,131,1,0,0,0,29,134,1,0,0,0,31,137,1,0,0,0,33,142,
		1,0,0,0,35,148,1,0,0,0,37,151,1,0,0,0,39,155,1,0,0,0,41,161,1,0,0,0,43,
		169,1,0,0,0,45,174,1,0,0,0,47,180,1,0,0,0,49,185,1,0,0,0,51,192,1,0,0,
		0,53,196,1,0,0,0,55,205,1,0,0,0,57,210,1,0,0,0,59,216,1,0,0,0,61,218,1,
		0,0,0,63,220,1,0,0,0,65,223,1,0,0,0,67,227,1,0,0,0,69,230,1,0,0,0,71,233,
		1,0,0,0,73,235,1,0,0,0,75,238,1,0,0,0,77,78,5,123,0,0,78,2,1,0,0,0,79,
		80,5,44,0,0,80,4,1,0,0,0,81,82,5,125,0,0,82,6,1,0,0,0,83,84,5,40,0,0,84,
		8,1,0,0,0,85,86,5,59,0,0,86,10,1,0,0,0,87,88,5,41,0,0,88,12,1,0,0,0,89,
		90,5,46,0,0,90,14,1,0,0,0,91,92,5,91,0,0,92,16,1,0,0,0,93,94,5,93,0,0,
		94,18,1,0,0,0,95,96,5,47,0,0,96,97,5,47,0,0,97,101,1,0,0,0,98,100,8,0,
		0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,
		1,0,0,0,103,101,1,0,0,0,104,105,6,9,0,0,105,20,1,0,0,0,106,107,5,47,0,
		0,107,108,5,42,0,0,108,112,1,0,0,0,109,111,9,0,0,0,110,109,1,0,0,0,111,
		114,1,0,0,0,112,113,1,0,0,0,112,110,1,0,0,0,113,115,1,0,0,0,114,112,1,
		0,0,0,115,116,5,42,0,0,116,117,5,47,0,0,117,118,1,0,0,0,118,119,6,10,0,
		0,119,22,1,0,0,0,120,121,5,108,0,0,121,122,5,101,0,0,122,123,5,116,0,0,
		123,24,1,0,0,0,124,125,5,114,0,0,125,126,5,101,0,0,126,127,5,116,0,0,127,
		128,5,117,0,0,128,129,5,114,0,0,129,130,5,110,0,0,130,26,1,0,0,0,131,132,
		5,102,0,0,132,133,5,110,0,0,133,28,1,0,0,0,134,135,5,105,0,0,135,136,5,
		102,0,0,136,30,1,0,0,0,137,138,5,101,0,0,138,139,5,108,0,0,139,140,5,115,
		0,0,140,141,5,101,0,0,141,32,1,0,0,0,142,143,5,119,0,0,143,144,5,104,0,
		0,144,145,5,105,0,0,145,146,5,108,0,0,146,147,5,101,0,0,147,34,1,0,0,0,
		148,149,5,100,0,0,149,150,5,111,0,0,150,36,1,0,0,0,151,152,5,102,0,0,152,
		153,5,111,0,0,153,154,5,114,0,0,154,38,1,0,0,0,155,156,5,99,0,0,156,157,
		5,108,0,0,157,158,5,97,0,0,158,159,5,115,0,0,159,160,5,115,0,0,160,40,
		1,0,0,0,161,162,5,101,0,0,162,163,5,120,0,0,163,164,5,116,0,0,164,165,
		5,101,0,0,165,166,5,110,0,0,166,167,5,100,0,0,167,168,5,115,0,0,168,42,
		1,0,0,0,169,170,5,116,0,0,170,171,5,104,0,0,171,172,5,105,0,0,172,173,
		5,115,0,0,173,44,1,0,0,0,174,175,5,115,0,0,175,176,5,117,0,0,176,177,5,
		112,0,0,177,178,5,101,0,0,178,179,5,114,0,0,179,46,1,0,0,0,180,181,5,110,
		0,0,181,182,5,101,0,0,182,183,5,119,0,0,183,48,1,0,0,0,184,186,7,1,0,0,
		185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,
		1,0,0,0,189,190,6,24,0,0,190,50,1,0,0,0,191,193,7,2,0,0,192,191,1,0,0,
		0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,52,1,0,0,0,196,200,
		5,34,0,0,197,199,8,3,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,
		0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,34,0,0,204,
		54,1,0,0,0,205,206,5,116,0,0,206,207,5,114,0,0,207,208,5,117,0,0,208,209,
		5,101,0,0,209,56,1,0,0,0,210,211,5,102,0,0,211,212,5,97,0,0,212,213,5,
		108,0,0,213,214,5,115,0,0,214,215,5,101,0,0,215,58,1,0,0,0,216,217,7,4,
		0,0,217,60,1,0,0,0,218,219,7,5,0,0,219,62,1,0,0,0,220,221,7,6,0,0,221,
		222,5,61,0,0,222,64,1,0,0,0,223,225,7,7,0,0,224,226,5,61,0,0,225,224,1,
		0,0,0,225,226,1,0,0,0,226,66,1,0,0,0,227,228,5,124,0,0,228,229,5,124,0,
		0,229,68,1,0,0,0,230,231,5,38,0,0,231,232,5,38,0,0,232,70,1,0,0,0,233,
		234,7,8,0,0,234,72,1,0,0,0,235,236,7,9,0,0,236,237,5,61,0,0,237,74,1,0,
		0,0,238,242,7,10,0,0,239,241,7,11,0,0,240,239,1,0,0,0,241,244,1,0,0,0,
		242,240,1,0,0,0,242,243,1,0,0,0,243,76,1,0,0,0,244,242,1,0,0,0,8,0,101,
		112,187,194,200,225,242,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
