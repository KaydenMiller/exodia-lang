//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.ExodiaLang\Exodia.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExodiaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SINGLE_COMMENT=10, BLOCK_COMMENT=11, LET=12, RETURN=13, FN=14, IF=15, 
		ELSE=16, WHILE=17, DO=18, FOR=19, CLASS=20, EXTENDS=21, THIS=22, SUPER=23, 
		NEW=24, WHITESPACE=25, INT=26, STRING=27, TRUE=28, FALSE=29, ADD=30, SUB=31, 
		ADDITIVE_OPERATOR=32, MUL=33, DIV=34, MULTIPLICATIVE_OPERATOR=35, EQUALITY_OPERATOR=36, 
		RELATIONAL_OPERATOR=37, LOGICAL_OR=38, LOGICAL_AND=39, SIMPLE_ASSIGNMENT_OPERATOR=40, 
		COMPLEX_ASSIGMENT_OPERATOR=41, IDENTIFIER=42, NEWLINE=43, SEMI=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"SINGLE_COMMENT", "BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", 
		"WHILE", "DO", "FOR", "CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", 
		"INT", "STRING", "TRUE", "FALSE", "ADD", "SUB", "ADDITIVE_OPERATOR", "MUL", 
		"DIV", "MULTIPLICATIVE_OPERATOR", "EQUALITY_OPERATOR", "RELATIONAL_OPERATOR", 
		"LOGICAL_OR", "LOGICAL_AND", "SIMPLE_ASSIGNMENT_OPERATOR", "COMPLEX_ASSIGMENT_OPERATOR", 
		"IDENTIFIER", "NEWLINE", "SEMI"
	};


	public ExodiaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExodiaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "','", "'{'", "'}'", "'.'", "'['", "']'", null, 
		null, "'let'", "'return'", "'fn'", "'if'", "'else'", "'while'", "'do'", 
		"'for'", "'class'", "'extends'", "'this'", "'super'", "'new'", null, null, 
		null, "'true'", "'false'", "'+'", "'-'", null, "'*'", "'/'", null, null, 
		null, "'||'", "'&&'", null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SINGLE_COMMENT", 
		"BLOCK_COMMENT", "LET", "RETURN", "FN", "IF", "ELSE", "WHILE", "DO", "FOR", 
		"CLASS", "EXTENDS", "THIS", "SUPER", "NEW", "WHITESPACE", "INT", "STRING", 
		"TRUE", "FALSE", "ADD", "SUB", "ADDITIVE_OPERATOR", "MUL", "DIV", "MULTIPLICATIVE_OPERATOR", 
		"EQUALITY_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OR", "LOGICAL_AND", 
		"SIMPLE_ASSIGNMENT_OPERATOR", "COMPLEX_ASSIGMENT_OPERATOR", "IDENTIFIER", 
		"NEWLINE", "SEMI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exodia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExodiaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,5,9,112,8,9,10,9,12,9,115,9,9,1,9,1,9,
		1,10,1,10,1,10,1,10,5,10,123,8,10,10,10,12,10,126,9,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
		1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,4,24,198,8,24,11,
		24,12,24,199,1,24,1,24,1,25,4,25,205,8,25,11,25,12,25,206,1,26,1,26,5,
		26,211,8,26,10,26,12,26,214,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
		33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,3,36,246,8,36,1,37,1,37,1,37,
		1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,5,41,261,8,41,10,41,
		12,41,264,9,41,1,42,3,42,267,8,42,1,42,1,42,1,43,1,43,1,124,0,44,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,41,83,42,85,43,87,44,1,0,12,2,0,10,10,13,13,3,0,9,10,12,13,32,
		32,1,0,48,57,1,0,34,34,2,0,43,43,45,45,2,0,42,42,47,47,2,0,33,33,61,61,
		2,0,60,60,62,62,1,0,61,61,3,0,42,43,45,45,47,47,2,0,65,90,97,122,3,0,49,
		57,65,90,97,122,279,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,
		0,9,97,1,0,0,0,11,99,1,0,0,0,13,101,1,0,0,0,15,103,1,0,0,0,17,105,1,0,
		0,0,19,107,1,0,0,0,21,118,1,0,0,0,23,132,1,0,0,0,25,136,1,0,0,0,27,143,
		1,0,0,0,29,146,1,0,0,0,31,149,1,0,0,0,33,154,1,0,0,0,35,160,1,0,0,0,37,
		163,1,0,0,0,39,167,1,0,0,0,41,173,1,0,0,0,43,181,1,0,0,0,45,186,1,0,0,
		0,47,192,1,0,0,0,49,197,1,0,0,0,51,204,1,0,0,0,53,208,1,0,0,0,55,217,1,
		0,0,0,57,222,1,0,0,0,59,228,1,0,0,0,61,230,1,0,0,0,63,232,1,0,0,0,65,234,
		1,0,0,0,67,236,1,0,0,0,69,238,1,0,0,0,71,240,1,0,0,0,73,243,1,0,0,0,75,
		247,1,0,0,0,77,250,1,0,0,0,79,253,1,0,0,0,81,255,1,0,0,0,83,258,1,0,0,
		0,85,266,1,0,0,0,87,270,1,0,0,0,89,90,5,61,0,0,90,2,1,0,0,0,91,92,5,40,
		0,0,92,4,1,0,0,0,93,94,5,41,0,0,94,6,1,0,0,0,95,96,5,44,0,0,96,8,1,0,0,
		0,97,98,5,123,0,0,98,10,1,0,0,0,99,100,5,125,0,0,100,12,1,0,0,0,101,102,
		5,46,0,0,102,14,1,0,0,0,103,104,5,91,0,0,104,16,1,0,0,0,105,106,5,93,0,
		0,106,18,1,0,0,0,107,108,5,47,0,0,108,109,5,47,0,0,109,113,1,0,0,0,110,
		112,8,0,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,
		0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,6,9,0,0,117,20,1,0,0,0,118,
		119,5,47,0,0,119,120,5,42,0,0,120,124,1,0,0,0,121,123,9,0,0,0,122,121,
		1,0,0,0,123,126,1,0,0,0,124,125,1,0,0,0,124,122,1,0,0,0,125,127,1,0,0,
		0,126,124,1,0,0,0,127,128,5,42,0,0,128,129,5,47,0,0,129,130,1,0,0,0,130,
		131,6,10,0,0,131,22,1,0,0,0,132,133,5,108,0,0,133,134,5,101,0,0,134,135,
		5,116,0,0,135,24,1,0,0,0,136,137,5,114,0,0,137,138,5,101,0,0,138,139,5,
		116,0,0,139,140,5,117,0,0,140,141,5,114,0,0,141,142,5,110,0,0,142,26,1,
		0,0,0,143,144,5,102,0,0,144,145,5,110,0,0,145,28,1,0,0,0,146,147,5,105,
		0,0,147,148,5,102,0,0,148,30,1,0,0,0,149,150,5,101,0,0,150,151,5,108,0,
		0,151,152,5,115,0,0,152,153,5,101,0,0,153,32,1,0,0,0,154,155,5,119,0,0,
		155,156,5,104,0,0,156,157,5,105,0,0,157,158,5,108,0,0,158,159,5,101,0,
		0,159,34,1,0,0,0,160,161,5,100,0,0,161,162,5,111,0,0,162,36,1,0,0,0,163,
		164,5,102,0,0,164,165,5,111,0,0,165,166,5,114,0,0,166,38,1,0,0,0,167,168,
		5,99,0,0,168,169,5,108,0,0,169,170,5,97,0,0,170,171,5,115,0,0,171,172,
		5,115,0,0,172,40,1,0,0,0,173,174,5,101,0,0,174,175,5,120,0,0,175,176,5,
		116,0,0,176,177,5,101,0,0,177,178,5,110,0,0,178,179,5,100,0,0,179,180,
		5,115,0,0,180,42,1,0,0,0,181,182,5,116,0,0,182,183,5,104,0,0,183,184,5,
		105,0,0,184,185,5,115,0,0,185,44,1,0,0,0,186,187,5,115,0,0,187,188,5,117,
		0,0,188,189,5,112,0,0,189,190,5,101,0,0,190,191,5,114,0,0,191,46,1,0,0,
		0,192,193,5,110,0,0,193,194,5,101,0,0,194,195,5,119,0,0,195,48,1,0,0,0,
		196,198,7,1,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,
		1,0,0,0,200,201,1,0,0,0,201,202,6,24,1,0,202,50,1,0,0,0,203,205,7,2,0,
		0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,
		52,1,0,0,0,208,212,5,34,0,0,209,211,8,3,0,0,210,209,1,0,0,0,211,214,1,
		0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,
		215,216,5,34,0,0,216,54,1,0,0,0,217,218,5,116,0,0,218,219,5,114,0,0,219,
		220,5,117,0,0,220,221,5,101,0,0,221,56,1,0,0,0,222,223,5,102,0,0,223,224,
		5,97,0,0,224,225,5,108,0,0,225,226,5,115,0,0,226,227,5,101,0,0,227,58,
		1,0,0,0,228,229,5,43,0,0,229,60,1,0,0,0,230,231,5,45,0,0,231,62,1,0,0,
		0,232,233,7,4,0,0,233,64,1,0,0,0,234,235,5,42,0,0,235,66,1,0,0,0,236,237,
		5,47,0,0,237,68,1,0,0,0,238,239,7,5,0,0,239,70,1,0,0,0,240,241,7,6,0,0,
		241,242,5,61,0,0,242,72,1,0,0,0,243,245,7,7,0,0,244,246,5,61,0,0,245,244,
		1,0,0,0,245,246,1,0,0,0,246,74,1,0,0,0,247,248,5,124,0,0,248,249,5,124,
		0,0,249,76,1,0,0,0,250,251,5,38,0,0,251,252,5,38,0,0,252,78,1,0,0,0,253,
		254,7,8,0,0,254,80,1,0,0,0,255,256,7,9,0,0,256,257,5,61,0,0,257,82,1,0,
		0,0,258,262,7,10,0,0,259,261,7,11,0,0,260,259,1,0,0,0,261,264,1,0,0,0,
		262,260,1,0,0,0,262,263,1,0,0,0,263,84,1,0,0,0,264,262,1,0,0,0,265,267,
		5,13,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,10,
		0,0,269,86,1,0,0,0,270,271,5,59,0,0,271,88,1,0,0,0,9,0,113,124,199,206,
		212,245,262,266,2,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
