//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/workspaces/compilers/cspg/Grammer.ParserGenerator/Interperter.Kaleidoscope/Kaleidoscope.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KaleidoscopeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, WHITESPACE=7, DEF=8, EXTERN=9, 
		NUMBER=10, IDENTIFIER=11, OP=12;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_definition = 2, RULE_external = 3, 
		RULE_prototype = 4, RULE_binaryExpression = 5, RULE_identifierExpression = 6, 
		RULE_numberExpression = 7, RULE_parenExpression = 8, RULE_primary = 9;
	public static readonly string[] ruleNames = {
		"program", "expression", "definition", "external", "prototype", "binaryExpression", 
		"identifierExpression", "numberExpression", "parenExpression", "primary"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'('", "')'", "','", null, "'def'", "'extern'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "WHITESPACE", "DEF", "EXTERN", 
		"NUMBER", "IDENTIFIER", "OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Kaleidoscope.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KaleidoscopeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KaleidoscopeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KaleidoscopeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalContext external() {
			return GetRuleContext<ExternalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				definition();
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21;
				external();
				}
				break;
			case T__3:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22;
				expression();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 4);
				{
				State = 23;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				primary();
				State = 27;
				binaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(KaleidoscopeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(DEF);
			State = 33;
			prototype();
			State = 34;
			Match(T__1);
			State = 35;
			expression();
			State = 36;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(KaleidoscopeParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		public ExternalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterExternal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitExternal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalContext external() {
		ExternalContext _localctx = new ExternalContext(Context, State);
		EnterRule(_localctx, 6, RULE_external);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(EXTERN);
			State = 39;
			prototype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(KaleidoscopeParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KaleidoscopeParser.IDENTIFIER, i);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(IDENTIFIER);
			State = 42;
			Match(T__3);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 43;
				Match(IDENTIFIER);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
	 
		public BinaryExpressionContext() { }
		public virtual void CopyFrom(BinaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinuedBinaryExpressionContext : BinaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(KaleidoscopeParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ContinuedBinaryExpressionContext(BinaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterContinuedBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitContinuedBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinuedBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinalBinaryExpressionContext : BinaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(KaleidoscopeParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public FinalBinaryExpressionContext(BinaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterFinalBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitFinalBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryExpression);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ContinuedBinaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(OP);
				State = 52;
				expression();
				}
				break;
			case 2:
				_localctx = new FinalBinaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				Match(OP);
				State = 54;
				primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
	 
		public IdentifierExpressionContext() { }
		public virtual void CopyFrom(IdentifierExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallExpressionContext : IdentifierExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KaleidoscopeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallExpressionContext(IdentifierExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : IdentifierExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KaleidoscopeParser.IDENTIFIER, 0); }
		public VariableExpressionContext(IdentifierExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifierExpression);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new CallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(IDENTIFIER);
				State = 58;
				Match(T__3);
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3088L) != 0)) {
					{
					{
					State = 59;
					expression();
					State = 60;
					Match(T__5);
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 67;
				Match(T__4);
				}
				break;
			case 2:
				_localctx = new VariableExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KaleidoscopeParser.NUMBER, 0); }
		public NumberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberExpressionContext numberExpression() {
		NumberExpressionContext _localctx = new NumberExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_numberExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenExpressionContext parenExpression() {
		ParenExpressionContext _localctx = new ParenExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_parenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__3);
			State = 74;
			expression();
			State = 75;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpressionContext numberExpression() {
			return GetRuleContext<NumberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenExpressionContext parenExpression() {
			return GetRuleContext<ParenExpressionContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKaleidoscopeListener typedListener = listener as IKaleidoscopeListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKaleidoscopeVisitor<TResult> typedVisitor = visitor as IKaleidoscopeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 18, RULE_primary);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				identifierExpression();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				numberExpression();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				parenExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,83,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,3,0,25,8,0,1,1,1,1,1,1,1,1,3,1,31,
		8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,5,4,45,8,4,10,4,12,
		4,48,9,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,56,8,5,1,6,1,6,1,6,1,6,1,6,5,6,63,
		8,6,10,6,12,6,66,9,6,1,6,1,6,3,6,70,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,3,9,81,8,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,0,82,0,24,1,0,0,
		0,2,30,1,0,0,0,4,32,1,0,0,0,6,38,1,0,0,0,8,41,1,0,0,0,10,55,1,0,0,0,12,
		69,1,0,0,0,14,71,1,0,0,0,16,73,1,0,0,0,18,80,1,0,0,0,20,25,3,4,2,0,21,
		25,3,6,3,0,22,25,3,2,1,0,23,25,5,1,0,0,24,20,1,0,0,0,24,21,1,0,0,0,24,
		22,1,0,0,0,24,23,1,0,0,0,25,1,1,0,0,0,26,27,3,18,9,0,27,28,3,10,5,0,28,
		31,1,0,0,0,29,31,3,18,9,0,30,26,1,0,0,0,30,29,1,0,0,0,31,3,1,0,0,0,32,
		33,5,8,0,0,33,34,3,8,4,0,34,35,5,2,0,0,35,36,3,2,1,0,36,37,5,3,0,0,37,
		5,1,0,0,0,38,39,5,9,0,0,39,40,3,8,4,0,40,7,1,0,0,0,41,42,5,11,0,0,42,46,
		5,4,0,0,43,45,5,11,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,47,
		1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,5,0,0,50,9,1,0,0,0,51,52,5,
		12,0,0,52,56,3,2,1,0,53,54,5,12,0,0,54,56,3,18,9,0,55,51,1,0,0,0,55,53,
		1,0,0,0,56,11,1,0,0,0,57,58,5,11,0,0,58,64,5,4,0,0,59,60,3,2,1,0,60,61,
		5,6,0,0,61,63,1,0,0,0,62,59,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,
		1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,70,5,5,0,0,68,70,5,11,0,0,69,57,
		1,0,0,0,69,68,1,0,0,0,70,13,1,0,0,0,71,72,5,10,0,0,72,15,1,0,0,0,73,74,
		5,4,0,0,74,75,3,2,1,0,75,76,5,5,0,0,76,17,1,0,0,0,77,81,3,12,6,0,78,81,
		3,14,7,0,79,81,3,16,8,0,80,77,1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,19,
		1,0,0,0,7,24,30,46,55,64,69,80
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
